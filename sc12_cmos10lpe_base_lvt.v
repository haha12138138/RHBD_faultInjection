/*
 * - * - Source Versions - * -
 * #$Id: add.lang,v 1.11 2008/03/31 12:02:36 aruvas01 Exp $
 * #$Id: aoi.lang,v 1.8 2008/03/31 12:02:36 aruvas01 Exp $
 * #$Id: comb.lang,v 1.17 2008/03/31 12:02:36 aruvas01 Exp $
 * #$Id: common.lang,v 1.26 2008/03/31 12:02:36 aruvas01 Exp $
 * #$Id: global_vars.lang,v 1.5 2005/09/26 14:57:32 saravana Exp $
 * #$Id: header.lang,v 1.2 2008/01/10 14:02:45 aruvas01 Exp $
 * #$Id: lat.lang,v 1.11 2008/03/31 12:02:36 aruvas01 Exp $
 * #$Id: lcg.lang,v 1.6 2008/03/31 12:02:36 aruvas01 Exp $
 * #$Id: lvl.lang,v 1.6 2008/03/31 12:02:36 aruvas01 Exp $
 * #$Id: misc.lang,v 1.10 2008/03/31 12:02:36 aruvas01 Exp $
 * #$Id: mux.lang,v 1.12 2008/03/31 12:02:36 aruvas01 Exp $
 * #$Id: options.lang,v 1.12 2008/04/02 09:44:41 aruvas01 Exp $
 * #$Id: sdff.lang,v 1.20 2008/05/16 11:22:58 shuaga01 Exp $
 * 
 *  CONFIDENTIAL AND PROPRIETARY SOFTWARE OF ARM PHYSICAL IP, INC.
 * 
 *  Copyright (c) 1993 - 2005 ARM Physical IP, Inc.  All Rights Reserved.
 * 
 *  Use of this Software is subject to the terms and conditions of the
 *  applicable license agreement with ARM Physical IP, Inc.
 *  In addition, this Software is protected by patents, copyright law 
 *  and international treaties.
 * 
 *  The copyright notice(s) in this Software does not indicate actual or
 *  intended publication of this Software.
 */


`define ARM_PROP_DELAY 1.0
`define ARM_PERIOD 1.0
`define ARM_WIDTH 1.0
`define ARM_SETUP_TIME 1.0
`define ARM_HOLD_TIME 0.5
`define ARM_RECOVERY_TIME 1.0
`define ARM_REMOVAL_TIME 0.5

`timescale 1ns/1ps


//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR3_X4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR3_X4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR3_X4M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR3_X3M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR3_X3M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR3_X3M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR3_X2M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR3_X2M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR3_X2M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR3_X1P4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR3_X1P4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR3_X1P4M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR3_X1M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR3_X1M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR3_X1M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR3_X0P7M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR3_X0P7M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR3_X0P7M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR3_X0P5M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR3_X0P5M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR3_X0P5M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR2_X4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR2_X4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR2_X4M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR2_X3M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR2_X3M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR2_X3M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR2_X2M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR2_X2M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR2_X2M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR2_X1P4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR2_X1P4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR2_X1P4M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR2_X1M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR2_X1M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR2_X1M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR2_X0P7M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR2_X0P7M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR2_X0P7M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XOR2_X0P5M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XOR2_X0P5M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XOR2_X0P5M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR3_X4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR3_X4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xnor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR3_X4M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR3_X3M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR3_X3M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xnor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR3_X3M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR3_X2M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR3_X2M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xnor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR3_X2M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR3_X1P4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR3_X1P4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xnor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR3_X1P4M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR3_X1M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR3_X1M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xnor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR3_X1M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR3_X0P7M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR3_X0P7M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xnor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR3_X0P7M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR3_X0P5M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR3_X0P5M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  xnor I0(Y, A, B, C);
 specify
if (B==1'b0 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge C *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR3_X0P5M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR2_X4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR2_X4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xnor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR2_X4M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR2_X3M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR2_X3M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xnor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR2_X3M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR2_X2M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR2_X2M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xnor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR2_X2M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR2_X1P4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR2_X1P4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xnor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR2_X1P4M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR2_X1M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR2_X1M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xnor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR2_X1M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR2_X0P7M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR2_X0P7M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xnor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR2_X0P7M_A12TL
`endcelldefine
//$Id: xor.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module XNOR2_X0P5M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module XNOR2_X0P5M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  xnor I0(Y, A, B);
 specify
(posedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // XNOR2_X0P5M_A12TL
`endcelldefine
//$Id: tie.lang,v 1.1 2008/01/10 14:01:20 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module TIELO_X1M_A12TL (Y, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module TIELO_X1M_A12TL (Y);
`endif
output Y;

  buf I0(Y, 1'b0);

endmodule //TIELO_X1M_A12TL 
`endcelldefine
//$Id: tie.lang,v 1.1 2008/01/10 14:01:20 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module TIEHI_X1M_A12TL (Y, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module TIEHI_X1M_A12TL (Y);
`endif
output Y;

  buf I0(Y, 1'b1);

endmodule //TIEHI_X1M_A12TL 
`endcelldefine
//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFYQ_X4M_A12TL (Q, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFYQ_X4M_A12TL (Q, CK, D, SE, SI);
`endif
output Q;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFYQ_X4M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFYQ_X3M_A12TL (Q, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFYQ_X3M_A12TL (Q, CK, D, SE, SI);
`endif
output Q;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFYQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFYQ_X2M_A12TL (Q, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFYQ_X2M_A12TL (Q, CK, D, SE, SI);
`endif
output Q;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFYQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFYQ_X1M_A12TL (Q, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFYQ_X1M_A12TL (Q, CK, D, SE, SI);
`endif
output Q;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFYQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSRPQ_X4M_A12TL (Q, CK, D, R, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSRPQ_X4M_A12TL (Q, CK, D, R, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN, R;
reg NOTIFIER;
  not   XX0 (xRN, R);
  buf   XX1 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN  = (!R&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN  = (!R&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI_AND_SN  = (!D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN  = (D&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI_AND_SN  = (D&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI_AND_SN  = (D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN  = (!D&!R&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN  = (D&!R&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN  = (!D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_SN  = (D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!D&!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI  = (!D&!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (!D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (!CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (!CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI  = (!CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (!CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI  = (!CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI  = (!CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_SI  = (!CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_SI  = (CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_SI  = (CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_NOT_SI  = (CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_SI  = (CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // SDFFSRPQ_X4M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSRPQ_X3M_A12TL (Q, CK, D, R, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSRPQ_X3M_A12TL (Q, CK, D, R, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN, R;
reg NOTIFIER;
  not   XX0 (xRN, R);
  buf   XX1 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN  = (!R&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN  = (!R&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI_AND_SN  = (!D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN  = (D&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI_AND_SN  = (D&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI_AND_SN  = (D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN  = (!D&!R&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN  = (D&!R&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN  = (!D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_SN  = (D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!D&!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI  = (!D&!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (!D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (!CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (!CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI  = (!CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (!CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI  = (!CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI  = (!CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_SI  = (!CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_SI  = (CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_SI  = (CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_NOT_SI  = (CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_SI  = (CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // SDFFSRPQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSRPQ_X2M_A12TL (Q, CK, D, R, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSRPQ_X2M_A12TL (Q, CK, D, R, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN, R;
reg NOTIFIER;
  not   XX0 (xRN, R);
  buf   XX1 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN  = (!R&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN  = (!R&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI_AND_SN  = (!D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN  = (D&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI_AND_SN  = (D&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI_AND_SN  = (D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN  = (!D&!R&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN  = (D&!R&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN  = (!D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_SN  = (D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!D&!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI  = (!D&!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (!D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (!CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (!CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI  = (!CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (!CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI  = (!CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI  = (!CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_SI  = (!CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_SI  = (CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_SI  = (CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_NOT_SI  = (CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_SI  = (CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // SDFFSRPQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSRPQ_X1M_A12TL (Q, CK, D, R, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSRPQ_X1M_A12TL (Q, CK, D, R, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN, R;
reg NOTIFIER;
  not   XX0 (xRN, R);
  buf   XX1 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN  = (!R&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN  = (!R&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI_AND_SN  = (!D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN  = (D&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI_AND_SN  = (D&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI_AND_SN  = (D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN  = (!D&!R&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN  = (D&!R&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN  = (!D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_SN  = (D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!D&!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI  = (!D&!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (!D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (!CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (!CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI  = (!CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (!CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI  = (!CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI  = (!CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_SI  = (!CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_SI  = (CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_SI  = (CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_NOT_SI  = (CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_SI  = (CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // SDFFSRPQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSRPQ_X0P5M_A12TL (Q, CK, D, R, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSRPQ_X0P5M_A12TL (Q, CK, D, R, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN, R;
reg NOTIFIER;
  not   XX0 (xRN, R);
  buf   XX1 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CK_AND_D_AND_SE_AND_SI ;
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN  = (!R&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN  = (!R&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI_AND_SN  = (!D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN  = (D&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI_AND_SN  = (D&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI_AND_SN  = (D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN  = (!D&!R&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN  = (D&!R&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN  = (!D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_SN  = (D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!D&!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI  = (!D&!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (!D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (!CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (!CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI  = (!CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (!CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI  = (!CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI  = (!CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D_AND_SE_AND_SI  = (!CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (CK&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI  = (CK&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI  = (CK&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D_AND_SE_AND_SI  = (CK&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI  = (CK&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_NOT_SE_AND_SI  = (CK&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_NOT_SI  = (CK&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D_AND_SE_AND_SI  = (CK&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // SDFFSRPQ_X0P5M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSQN_X3M_A12TL (QN, CK, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSQN_X3M_A12TL (QN, CK, D, SE, SI, SN);
`endif
output QN;
input D, SI, SE, CK, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFSQN_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSQN_X2M_A12TL (QN, CK, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSQN_X2M_A12TL (QN, CK, D, SE, SI, SN);
`endif
output QN;
input D, SI, SE, CK, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFSQN_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSQN_X1M_A12TL (QN, CK, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSQN_X1M_A12TL (QN, CK, D, SE, SI, SN);
`endif
output QN;
input D, SI, SE, CK, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFSQN_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSQN_X0P5M_A12TL (QN, CK, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSQN_X0P5M_A12TL (QN, CK, D, SE, SI, SN);
`endif
output QN;
input D, SI, SE, CK, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFSQN_X0P5M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSQ_X4M_A12TL (Q, CK, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSQ_X4M_A12TL (Q, CK, D, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFSQ_X4M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSQ_X3M_A12TL (Q, CK, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSQ_X3M_A12TL (Q, CK, D, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFSQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSQ_X2M_A12TL (Q, CK, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSQ_X2M_A12TL (Q, CK, D, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFSQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSQ_X1M_A12TL (Q, CK, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSQ_X1M_A12TL (Q, CK, D, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFSQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFSQ_X0P5M_A12TL (Q, CK, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFSQ_X0P5M_A12TL (Q, CK, D, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CK, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFSQ_X0P5M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFRPQN_X3M_A12TL (QN, CK, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFRPQN_X3M_A12TL (QN, CK, D, R, SE, SI);
`endif
output QN;
input D, SI, SE, CK, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFRPQN_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFRPQN_X2M_A12TL (QN, CK, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFRPQN_X2M_A12TL (QN, CK, D, R, SE, SI);
`endif
output QN;
input D, SI, SE, CK, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFRPQN_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFRPQN_X1M_A12TL (QN, CK, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFRPQN_X1M_A12TL (QN, CK, D, R, SE, SI);
`endif
output QN;
input D, SI, SE, CK, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFRPQN_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFRPQN_X0P5M_A12TL (QN, CK, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFRPQN_X0P5M_A12TL (QN, CK, D, R, SE, SI);
`endif
output QN;
input D, SI, SE, CK, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFRPQN_X0P5M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFRPQ_X4M_A12TL (Q, CK, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFRPQ_X4M_A12TL (Q, CK, D, R, SE, SI);
`endif
output Q;
input D, SI, SE, CK, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFRPQ_X4M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFRPQ_X3M_A12TL (Q, CK, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFRPQ_X3M_A12TL (Q, CK, D, R, SE, SI);
`endif
output Q;
input D, SI, SE, CK, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFRPQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFRPQ_X2M_A12TL (Q, CK, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFRPQ_X2M_A12TL (Q, CK, D, R, SE, SI);
`endif
output Q;
input D, SI, SE, CK, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFRPQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFRPQ_X1M_A12TL (Q, CK, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFRPQ_X1M_A12TL (Q, CK, D, R, SE, SI);
`endif
output Q;
input D, SI, SE, CK, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFRPQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFRPQ_X0P5M_A12TL (Q, CK, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFRPQ_X0P5M_A12TL (Q, CK, D, R, SE, SI);
`endif
output Q;
input D, SI, SE, CK, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, posedge CK &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFRPQ_X0P5M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFQN_X3M_A12TL (QN, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFQN_X3M_A12TL (QN, CK, D, SE, SI);
`endif
output QN;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFQN_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFQN_X2M_A12TL (QN, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFQN_X2M_A12TL (QN, CK, D, SE, SI);
`endif
output QN;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFQN_X2M_A12TL
`endcelldefine

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFQN_X1M_A12TL (QN, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFQN_X1M_A12TL (QN, CK, D, SE, SI);
`endif
output QN;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFQN_X1M_A12TL
`endcelldefine

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFQN_X0P5M_A12TL (QN, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFQN_X0P5M_A12TL (QN, CK, D, SE, SI);
`endif
output QN;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  not     I72 (QN, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFQN_X0P5M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFQ_X4M_A12TL (Q, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFQ_X4M_A12TL (Q, CK, D, SE, SI);
`endif
output Q;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFQ_X4M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFQ_X3M_A12TL (Q, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFQ_X3M_A12TL (Q, CK, D, SE, SI);
`endif
output Q;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFQ_X2M_A12TL (Q, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFQ_X2M_A12TL (Q, CK, D, SE, SI);
`endif
output Q;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFQ_X1M_A12TL (Q, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFQ_X1M_A12TL (Q, CK, D, SE, SI);
`endif
output Q;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFQ_X0P5M_A12TL (Q, CK, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFQ_X0P5M_A12TL (Q, CK, D, SE, SI);
`endif
output Q;
input D, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFQ_X0P5M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNSRPQ_X3M_A12TL (Q, CKN, D, R, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNSRPQ_X3M_A12TL (Q, CKN, D, R, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CKN, SN, R;
reg NOTIFIER;
  not   XX0 (xRN, R);
  buf   XX1 (xSN, SN);
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_D_AND_SE_AND_SI ;
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN  = (!R&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN  = (!R&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI_AND_SN  = (!D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN  = (D&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI_AND_SN  = (D&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI_AND_SN  = (D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN  = (!D&!R&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN  = (D&!R&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN  = (!D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_SN  = (D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!D&!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI  = (!D&!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (!D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!CKN&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI  = (!CKN&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI  = (!CKN&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI  = (!CKN&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI  = (!CKN&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI  = (!CKN&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI  = (!CKN&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI  = (!CKN&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (CKN&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI  = (CKN&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI  = (CKN&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI  = (CKN&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI  = (CKN&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI  = (CKN&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI  = (CKN&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_SE_AND_SI  = (CKN&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // SDFFNSRPQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNSRPQ_X2M_A12TL (Q, CKN, D, R, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNSRPQ_X2M_A12TL (Q, CKN, D, R, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CKN, SN, R;
reg NOTIFIER;
  not   XX0 (xRN, R);
  buf   XX1 (xSN, SN);
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_D_AND_SE_AND_SI ;
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN  = (!R&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN  = (!R&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI_AND_SN  = (!D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN  = (D&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI_AND_SN  = (D&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI_AND_SN  = (D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN  = (!D&!R&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN  = (D&!R&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN  = (!D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_SN  = (D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!D&!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI  = (!D&!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (!D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!CKN&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI  = (!CKN&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI  = (!CKN&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI  = (!CKN&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI  = (!CKN&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI  = (!CKN&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI  = (!CKN&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI  = (!CKN&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (CKN&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI  = (CKN&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI  = (CKN&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI  = (CKN&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI  = (CKN&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI  = (CKN&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI  = (CKN&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_SE_AND_SI  = (CKN&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // SDFFNSRPQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNSRPQ_X1M_A12TL (Q, CKN, D, R, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNSRPQ_X1M_A12TL (Q, CKN, D, R, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CKN, SN, R;
reg NOTIFIER;
  not   XX0 (xRN, R);
  buf   XX1 (xSN, SN);
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_D_AND_SE_AND_SI_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI ;
wire ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI ;
wire ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI ;
wire ENABLE_CKN_AND_D_AND_SE_AND_SI ;
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN  = (!R&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN  = (!R&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI_AND_SN  = (!D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN  = (D&!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI_AND_SN  = (D&!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI_AND_SN  = (D&SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN  = (!D&!R&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN  = (D&!R&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN  = (!D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_SN  = (D&!R&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!D&!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI  = (!D&!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (!D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI  = (D&!R&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!CKN&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI  = (!CKN&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI  = (!CKN&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI  = (!CKN&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI  = (!CKN&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI  = (!CKN&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI  = (!CKN&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI  = (!CKN&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI  = (CKN&!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI  = (CKN&!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI  = (CKN&!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI  = (CKN&!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI  = (CKN&D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI  = (CKN&D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI  = (CKN&D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D_AND_SE_AND_SI  = (CKN&D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_SE_AND_SI_AND_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_SI == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_NOT_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_NOT_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D_AND_SE_AND_SI == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // SDFFNSRPQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNSQ_X3M_A12TL (Q, CKN, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNSQ_X3M_A12TL (Q, CKN, D, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CKN, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFNSQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNSQ_X2M_A12TL (Q, CKN, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNSQ_X2M_A12TL (Q, CKN, D, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CKN, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFNSQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNSQ_X1M_A12TL (Q, CKN, D, SE, SI, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNSQ_X1M_A12TL (Q, CKN, D, SE, SI, SN);
`endif
output Q;
input D, SI, SE, CKN, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

  buf   XX0 (xSN, SN);
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_SN ;
wire ENABLE_NOT_SE_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_SE_AND_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SI_AND_SN ;
wire ENABLE_D_AND_NOT_SI_AND_SN ;
wire ENABLE_NOT_D_AND_SE_AND_SN ;
wire ENABLE_D_AND_SE_AND_SN ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_NOT_SI ;
wire ENABLE_D_AND_SE_AND_NOT_SI ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_NOT_SI_AND_SN  = (!SE&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI_AND_SN  = (!SE&SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI_AND_SN  = (!D&SI&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI_AND_SN  = (D&!SI&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SN  = (!D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SN  = (D&SE&SN) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_NOT_SI  = (!D&SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_NOT_SI  = (D&SE&!SI) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI_AND_SN == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE_AND_SN == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_D_AND_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // SDFFNSQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNRPQ_X3M_A12TL (Q, CKN, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNRPQ_X3M_A12TL (Q, CKN, D, R, SE, SI);
`endif
output Q;
input D, SI, SE, CKN, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFNRPQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNRPQ_X2M_A12TL (Q, CKN, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNRPQ_X2M_A12TL (Q, CKN, D, R, SE, SI);
`endif
output Q;
input D, SI, SE, CKN, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFNRPQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNRPQ_X1M_A12TL (Q, CKN, D, R, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNRPQ_X1M_A12TL (Q, CKN, D, R, SE, SI);
`endif
output Q;
input D, SI, SE, CKN, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

  not   XX0 (xRN, R); 
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_R_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SI ;
wire ENABLE_D_AND_NOT_R_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_R_AND_SE ;
wire ENABLE_D_AND_NOT_R_AND_SE ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI  = (!R&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_R_AND_NOT_SE_AND_SI  = (!R&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE_AND_SI  = (!D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE_AND_SI  = (D&SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SI  = (!D&!R&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_NOT_SI  = (D&!R&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_R_AND_SE  = (!D&!R&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_R_AND_SE  = (D&!R&SE) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b0 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && SE==1'b1 && SI==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_NOT_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$recrem(negedge R, negedge CKN &&& (ENABLE_D_AND_SE_AND_SI == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_R_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFNRPQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNQ_X3M_A12TL (Q, CKN, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNQ_X3M_A12TL (Q, CKN, D, SE, SI);
`endif
output Q;
input D, SI, SE, CKN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CKN,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CKN,`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFNQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNQ_X2M_A12TL (Q, CKN, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNQ_X2M_A12TL (Q, CKN, D, SE, SI);
`endif
output Q;
input D, SI, SE, CKN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CKN,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CKN,`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFNQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module SDFFNQ_X1M_A12TL (Q, CKN, D, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module SDFFNQ_X1M_A12TL (Q, CKN, D, SE, SI);
`endif
output Q;
input D, SI, SE, CKN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  not     IC (clk, CKN);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I1 (n1, D, SI, SE);
  buf     I2 (Q, n0);
wire ENABLE_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_SI ;
wire ENABLE_D_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_SE ;
wire ENABLE_D_AND_SE ;
assign ENABLE_NOT_SE_AND_NOT_SI  = (!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_SE_AND_SI  = (!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SI  = (!D&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SI  = (D&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_SE  = (!D&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_SE  = (D&SE) ? 1'b1:1'b0;
 specify
$width(posedge CKN,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CKN,`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && SI==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (SE==1'b0 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && SE==1'b1 && SI==1'b0)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && SE==1'b1)
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_D_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // SDFFNQ_X1M_A12TL
`endcelldefine
	

//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF2R2WS_X2M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL1, WBL2, WWL1, WWL2, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF2R2WS_X2M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL1, WBL2, WWL1, WWL2);
`endif
output RBL1, RBL2;
input WBL1, WWL1, WBL2, WWL2, RWL1, RWL2;
reg NOTIFIER;

   not I1 (WBL1_not, WBL1);
   not I2 (WBL2_not, WBL2);
   udp_tlatrf2 I3 (n0, WBL1_not, WWL1, WBL2_not, WWL2, NOTIFIER);
   not I4 (n1, n0);
   bufif1 I5 (RBL1, n1, RWL1);
   bufif1 I6 (RBL2, n1, RWL2);



wire ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_NOT_WWL2 ;
wire ENABLE_NOT_WWL1 ;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2  = (!RWL1&RWL2&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2  = (!RWL1&RWL2&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2  = (RWL1&!RWL2&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2  = (RWL1&!RWL2&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2  = (RWL1&RWL2&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2  = (RWL1&RWL2&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1  = (!RWL1&RWL2&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1  = (!RWL1&RWL2&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1  = (RWL1&!RWL2&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1  = (RWL1&!RWL2&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1  = (RWL1&RWL2&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1  = (RWL1&RWL2&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_NOT_WWL2  = (!WWL2) ? 1'b1:1'b0;
assign ENABLE_NOT_WWL1  = (!WWL1) ? 1'b1:1'b0;
 specify
if (RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if(RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if (RWL2==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b0)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b1)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b0)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b1)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b0)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b1)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b0)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b1)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if(RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);  
if(RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if (RWL1==1'b0 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b0)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b1)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b0)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b1)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b0)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b1)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b0)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b1)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL1 &&& (ENABLE_NOT_WWL2 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge WWL2 &&& (ENABLE_NOT_WWL1 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF2R2WS_X2M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF2R2WS_X1P4M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL1, WBL2, WWL1, WWL2, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF2R2WS_X1P4M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL1, WBL2, WWL1, WWL2);
`endif
output RBL1, RBL2;
input WBL1, WWL1, WBL2, WWL2, RWL1, RWL2;
reg NOTIFIER;

   not I1 (WBL1_not, WBL1);
   not I2 (WBL2_not, WBL2);
   udp_tlatrf2 I3 (n0, WBL1_not, WWL1, WBL2_not, WWL2, NOTIFIER);
   not I4 (n1, n0);
   bufif1 I5 (RBL1, n1, RWL1);
   bufif1 I6 (RBL2, n1, RWL2);



wire ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_NOT_WWL2 ;
wire ENABLE_NOT_WWL1 ;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2  = (!RWL1&RWL2&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2  = (!RWL1&RWL2&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2  = (RWL1&!RWL2&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2  = (RWL1&!RWL2&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2  = (RWL1&RWL2&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2  = (RWL1&RWL2&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1  = (!RWL1&RWL2&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1  = (!RWL1&RWL2&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1  = (RWL1&!RWL2&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1  = (RWL1&!RWL2&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1  = (RWL1&RWL2&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1  = (RWL1&RWL2&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_NOT_WWL2  = (!WWL2) ? 1'b1:1'b0;
assign ENABLE_NOT_WWL1  = (!WWL1) ? 1'b1:1'b0;
 specify
if (RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if(RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if (RWL2==1'b0 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if(RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if (RWL2==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b0)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b1)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b0)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b1)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b0)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b1)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b0)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b1)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if(RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);

if (RWL1==1'b0 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b0)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b1)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b0)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b1)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b0)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b1)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b0)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b1)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL1 &&& (ENABLE_NOT_WWL2 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge WWL2 &&& (ENABLE_NOT_WWL1 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF2R2WS_X1P4M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF2R2WS_X1M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL1, WBL2, WWL1, WWL2, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF2R2WS_X1M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL1, WBL2, WWL1, WWL2);
`endif
output RBL1, RBL2;
input WBL1, WWL1, WBL2, WWL2, RWL1, RWL2;
reg NOTIFIER;

   not I1 (WBL1_not, WBL1);
   not I2 (WBL2_not, WBL2);
   udp_tlatrf2 I3 (n0, WBL1_not, WWL1, WBL2_not, WWL2, NOTIFIER);
   not I4 (n1, n0);
   bufif1 I5 (RBL1, n1, RWL1);
   bufif1 I6 (RBL2, n1, RWL2);



wire ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_NOT_WWL2 ;
wire ENABLE_NOT_WWL1 ;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2  = (!RWL1&RWL2&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2  = (!RWL1&RWL2&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2  = (RWL1&!RWL2&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2  = (RWL1&!RWL2&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2  = (RWL1&RWL2&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2  = (RWL1&RWL2&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1  = (!RWL1&RWL2&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1  = (!RWL1&RWL2&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1  = (RWL1&!RWL2&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1  = (RWL1&!RWL2&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1  = (RWL1&RWL2&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1  = (RWL1&RWL2&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_NOT_WWL2  = (!WWL2) ? 1'b1:1'b0;
assign ENABLE_NOT_WWL1  = (!WWL1) ? 1'b1:1'b0;
 specify
if (RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if(RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL2==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL2==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if (RWL2==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b0)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b1)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b0)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b1)
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1)
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b0)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL2==1'b1)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b0)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL2==1'b1)
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL1 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b0)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL1==1'b1)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b0)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL1==1'b1)
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL2 *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL1 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL2 *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if(RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || RWL1==1'b0 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b0 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if (RWL1==1'b0 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || RWL1==1'b1 && WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b0)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b1)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b0)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b1)
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1)
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b0)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL2==1'b1)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b0)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL2==1'b1)
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL1 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b0)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL1==1'b1)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b0)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL1==1'b1)
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL2 *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL1 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL2 *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_NOT_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_NOT_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL1_AND_RWL2_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL1 &&& (ENABLE_NOT_WWL2 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge WWL2 &&& (ENABLE_NOT_WWL1 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF2R2WS_X1M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF2R1WS_X2M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL, WWL, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF2R1WS_X2M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL, WWL);
`endif
output RBL1, RBL2;
input WBL, WWL, RWL1, RWL2;
reg NOTIFIER;

   not        I0 (WWLN, WWL);
   not        I1 (R1WN, RWL1);
   not        I2 (RWL2N, RWL2);
   udp_tlatrf I3 (n0, WBL, WWL, WWLN,  NOTIFIER);
   bufif1     I4 (RBL1, n0, n2);
   bufif1     I5 (RBL2, n0, n3);
   udp_outrf  I6 (n2, n0, R1WN, RWL1);
   udp_outrf  I7 (n3, n0, RWL2N, RWL2);



wire ENABLE_NOT_RWL1_AND_RWL2 ;
wire ENABLE_RWL1_AND_NOT_RWL2 ;
wire ENABLE_RWL1_AND_RWL2 ;
assign ENABLE_NOT_RWL1_AND_RWL2  = (!RWL1&RWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2  = (RWL1&!RWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2  = (RWL1&RWL2) ? 1'b1:1'b0;
 specify
if (RWL2==1'b0 && WBL==1'b0 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL==1'b1 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WWL==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL==1'b0 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL==1'b1 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WWL==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0)
(WBL *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1)
(WBL *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0)
(posedge WWL *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1)
(posedge WWL *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL==1'b0 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL==1'b1 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WWL==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL==1'b0 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL==1'b1 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WWL==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0)
(WBL *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1)
(WBL *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0)
(posedge WWL *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1)
(posedge WWL *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL &&& (ENABLE_NOT_RWL1_AND_RWL2 == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_NOT_RWL1_AND_RWL2 == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_NOT_RWL2 == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_NOT_RWL2 == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_RWL2 == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_RWL2 == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL,`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF2R1WS_X2M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF2R1WS_X1P4M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL, WWL, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF2R1WS_X1P4M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL, WWL);
`endif
output RBL1, RBL2;
input WBL, WWL, RWL1, RWL2;
reg NOTIFIER;

   not        I0 (WWLN, WWL);
   not        I1 (R1WN, RWL1);
   not        I2 (RWL2N, RWL2);
   udp_tlatrf I3 (n0, WBL, WWL, WWLN,  NOTIFIER);
   bufif1     I4 (RBL1, n0, n2);
   bufif1     I5 (RBL2, n0, n3);
   udp_outrf  I6 (n2, n0, R1WN, RWL1);
   udp_outrf  I7 (n3, n0, RWL2N, RWL2);



wire ENABLE_NOT_RWL1_AND_RWL2 ;
wire ENABLE_RWL1_AND_NOT_RWL2 ;
wire ENABLE_RWL1_AND_RWL2 ;
assign ENABLE_NOT_RWL1_AND_RWL2  = (!RWL1&RWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2  = (RWL1&!RWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2  = (RWL1&RWL2) ? 1'b1:1'b0;
 specify
if (RWL2==1'b0 && WBL==1'b0 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL==1'b1 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WWL==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL==1'b0 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL==1'b1 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WWL==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0)
(WBL *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1)
(WBL *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0)
(posedge WWL *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1)
(posedge WWL *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL==1'b0 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL==1'b1 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WWL==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL==1'b0 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL==1'b1 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WWL==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0)
(WBL *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1)
(WBL *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0)
(posedge WWL *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1)
(posedge WWL *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL &&& (ENABLE_NOT_RWL1_AND_RWL2 == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_NOT_RWL1_AND_RWL2 == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_NOT_RWL2 == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_NOT_RWL2 == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_RWL2 == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_RWL2 == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL,`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF2R1WS_X1P4M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF2R1WS_X1M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL, WWL, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF2R1WS_X1M_A12TL (RBL1, RBL2, RWL1, RWL2, WBL, WWL);
`endif
output RBL1, RBL2;
input WBL, WWL, RWL1, RWL2;
reg NOTIFIER;

   not        I0 (WWLN, WWL);
   not        I1 (R1WN, RWL1);
   not        I2 (RWL2N, RWL2);
   udp_tlatrf I3 (n0, WBL, WWL, WWLN,  NOTIFIER);
   bufif1     I4 (RBL1, n0, n2);
   bufif1     I5 (RBL2, n0, n3);
   udp_outrf  I6 (n2, n0, R1WN, RWL1);
   udp_outrf  I7 (n3, n0, RWL2N, RWL2);



wire ENABLE_NOT_RWL1_AND_RWL2 ;
wire ENABLE_RWL1_AND_NOT_RWL2 ;
wire ENABLE_RWL1_AND_RWL2 ;
assign ENABLE_NOT_RWL1_AND_RWL2  = (!RWL1&RWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_NOT_RWL2  = (RWL1&!RWL2) ? 1'b1:1'b0;
assign ENABLE_RWL1_AND_RWL2  = (RWL1&RWL2) ? 1'b1:1'b0;
 specify
if (RWL2==1'b0 && WBL==1'b0 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WBL==1'b1 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0 && WWL==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL==1'b0 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WBL==1'b1 && WWL==1'b0)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b1 && WWL==1'b1)
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL1 *> RBL1) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL2==1'b0)
(WBL *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1)
(WBL *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL *> RBL1) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b0)
(posedge WWL *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL2==1'b1)
(posedge WWL *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL *> (RBL1 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL==1'b0 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WBL==1'b1 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0 && WWL==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL==1'b0 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WBL==1'b1 && WWL==1'b0)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b1 && WWL==1'b1)
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL2 *> RBL2) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (RWL1==1'b0)
(WBL *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1)
(WBL *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL *> RBL2) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b0)
(posedge WWL *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (RWL1==1'b1)
(posedge WWL *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL *> (RBL2 : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL &&& (ENABLE_NOT_RWL1_AND_RWL2 == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_NOT_RWL1_AND_RWL2 == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_NOT_RWL2 == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_NOT_RWL2 == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_RWL2 == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL1_AND_RWL2 == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL,`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF2R1WS_X1M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF1R2WS_X2M_A12TL (RBL, RWL, WBL1, WBL2, WWL1, WWL2, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF1R2WS_X2M_A12TL (RBL, RWL, WBL1, WBL2, WWL1, WWL2);
`endif
output RBL;
input WBL1, WWL1, WBL2, WWL2, RWL;
reg NOTIFIER;

   not I1 (WBL1_not, WBL1);
   not I2 (WBL2_not, WBL2);
   udp_tlatrf2 I3 (n0, WBL1_not, WWL1, WBL2_not, WWL2, NOTIFIER);
   not I4 (n1, n0);
   bufif1   I5(RBL, n1, RWL);



wire ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL_AND_NOT_WWL2 ;
wire ENABLE_RWL_AND_NOT_WWL1 ;
assign ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2  = (RWL&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_WBL2_AND_NOT_WWL2  = (RWL&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1  = (RWL&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_WBL1_AND_NOT_WWL1  = (RWL&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_NOT_WWL2  = (RWL&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_NOT_WWL1  = (RWL&!WWL1) ? 1'b1:1'b0;
 specify
if (WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if(WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if (WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL2==1'b0)
(WBL1 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL2==1'b1)
(WBL1 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b0)
(WBL2 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b1)
(WBL2 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL2==1'b0)
(posedge WWL1 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL2==1'b1)
(posedge WWL1 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL1 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b0)
(posedge WWL2 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b1)
(posedge WWL2 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL2 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL1 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL2 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL1 &&& (ENABLE_RWL_AND_NOT_WWL2 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge WWL2 &&& (ENABLE_RWL_AND_NOT_WWL1 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF1R2WS_X2M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF1R2WS_X1P4M_A12TL (RBL, RWL, WBL1, WBL2, WWL1, WWL2, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF1R2WS_X1P4M_A12TL (RBL, RWL, WBL1, WBL2, WWL1, WWL2);
`endif
output RBL;
input WBL1, WWL1, WBL2, WWL2, RWL;
reg NOTIFIER;

   not I1 (WBL1_not, WBL1);
   not I2 (WBL2_not, WBL2);
   udp_tlatrf2 I3 (n0, WBL1_not, WWL1, WBL2_not, WWL2, NOTIFIER);
   not I4 (n1, n0);
   bufif1   I5(RBL, n1, RWL);



wire ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL_AND_NOT_WWL2 ;
wire ENABLE_RWL_AND_NOT_WWL1 ;
assign ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2  = (RWL&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_WBL2_AND_NOT_WWL2  = (RWL&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1  = (RWL&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_WBL1_AND_NOT_WWL1  = (RWL&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_NOT_WWL2  = (RWL&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_NOT_WWL1  = (RWL&!WWL1) ? 1'b1:1'b0;
 specify
if (WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if(WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b1 || WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if(WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY, 0);
if (WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL2==1'b0)
(WBL1 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL2==1'b1)
(WBL1 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b0)
(WBL2 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b1)
(WBL2 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL2==1'b0)
(posedge WWL1 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL2==1'b1)
(posedge WWL1 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL1 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b0)
(posedge WWL2 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b1)
(posedge WWL2 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL2 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL1 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL2 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL1 &&& (ENABLE_RWL_AND_NOT_WWL2 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge WWL2 &&& (ENABLE_RWL_AND_NOT_WWL1 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF1R2WS_X1P4M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF1R2WS_X1M_A12TL (RBL, RWL, WBL1, WBL2, WWL1, WWL2, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF1R2WS_X1M_A12TL (RBL, RWL, WBL1, WBL2, WWL1, WWL2);
`endif
output RBL;
input WBL1, WWL1, WBL2, WWL2, RWL;
reg NOTIFIER;

   not I1 (WBL1_not, WBL1);
   not I2 (WBL2_not, WBL2);
   udp_tlatrf2 I3 (n0, WBL1_not, WWL1, WBL2_not, WWL2, NOTIFIER);
   not I4 (n1, n0);
   bufif1   I5(RBL, n1, RWL);



wire ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL_AND_WBL2_AND_NOT_WWL2 ;
wire ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL_AND_WBL1_AND_NOT_WWL1 ;
wire ENABLE_RWL_AND_NOT_WWL2 ;
wire ENABLE_RWL_AND_NOT_WWL1 ;
assign ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2  = (RWL&!WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_WBL2_AND_NOT_WWL2  = (RWL&WBL2&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1  = (RWL&!WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_WBL1_AND_NOT_WWL1  = (RWL&WBL1&!WWL1) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_NOT_WWL2  = (RWL&!WWL2) ? 1'b1:1'b0;
assign ENABLE_RWL_AND_NOT_WWL1  = (RWL&!WWL1) ? 1'b1:1'b0;
 specify
if (WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b0 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2 ==1'b1 || WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY,0);
if(WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || WBL1==1'b1 && WBL2==1'b0 && WWL1==1'b0 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, 0, `ARM_PROP_DELAY,0);
if (WBL1==1'b1 && WWL1==1'b0 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b0 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL1==1'b1 && WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b1 || WBL1==1'b0 && WBL2==1'b0 && WWL1==1'b1 && WWL2==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL2==1'b1 && WWL1==1'b1 && WWL2==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL2==1'b0)
(WBL1 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL2==1'b1)
(WBL1 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b0)
(WBL2 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b1)
(WBL2 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL2==1'b0)
(posedge WWL1 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL2==1'b1)
(posedge WWL1 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL1 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b0)
(posedge WWL2 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (WBL1==1'b1)
(posedge WWL2 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge WWL2 *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL1 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(WBL2 *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_NOT_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_WBL2_AND_NOT_WWL2 == 1'b1), negedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL1 &&& (ENABLE_RWL_AND_WBL2_AND_NOT_WWL2 == 1'b1), posedge WBL1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_NOT_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_WBL1_AND_NOT_WWL1 == 1'b1), negedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL2 &&& (ENABLE_RWL_AND_WBL1_AND_NOT_WWL1 == 1'b1), posedge WBL2, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL1 &&& (ENABLE_RWL_AND_NOT_WWL2 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge WWL2 &&& (ENABLE_RWL_AND_NOT_WWL1 == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF1R2WS_X1M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF1R1WS_X2M_A12TL (RBL, RWL, WBL, WWL, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF1R1WS_X2M_A12TL (RBL, RWL, WBL, WWL);
`endif
output RBL;
input WBL, WWL, RWL;
reg NOTIFIER;

   not II (wwn,WWL);
   udp_tlatrf I0 (n0, WBL, WWL, wwn,  NOTIFIER);
   bufif1     I1 (RBL, n0, RWL);



wire ENABLE_RWL ;
assign ENABLE_RWL  = (RWL) ? 1'b1:1'b0;
 specify
if (WBL==1'b0 && WWL==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL==1'b1 && WWL==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WWL==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(WBL *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge WWL *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL &&& (ENABLE_RWL == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL &&& (ENABLE_RWL == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF1R1WS_X2M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF1R1WS_X1P4M_A12TL (RBL, RWL, WBL, WWL, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF1R1WS_X1P4M_A12TL (RBL, RWL, WBL, WWL);
`endif
output RBL;
input WBL, WWL, RWL;
reg NOTIFIER;

   not II (wwn,WWL);
   udp_tlatrf I0 (n0, WBL, WWL, wwn,  NOTIFIER);
   bufif1     I1 (RBL, n0, RWL);



wire ENABLE_RWL ;
assign ENABLE_RWL  = (RWL) ? 1'b1:1'b0;
 specify
if (WBL==1'b0 && WWL==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL==1'b1 && WWL==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WWL==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(WBL *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge WWL *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL &&& (ENABLE_RWL == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL &&& (ENABLE_RWL == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF1R1WS_X1P4M_A12TL
`endcelldefine
//$Id: rf.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module RF1R1WS_X1M_A12TL (RBL, RWL, WBL, WWL, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module RF1R1WS_X1M_A12TL (RBL, RWL, WBL, WWL);
`endif
output RBL;
input WBL, WWL, RWL;
reg NOTIFIER;

   not II (wwn,WWL);
   udp_tlatrf I0 (n0, WBL, WWL, wwn,  NOTIFIER);
   bufif1     I1 (RBL, n0, RWL);



wire ENABLE_RWL ;
assign ENABLE_RWL  = (RWL) ? 1'b1:1'b0;
 specify
if (WBL==1'b0 && WWL==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WBL==1'b1 && WWL==1'b0)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
if (WWL==1'b1)
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(RWL *> RBL) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
ifnone
(WBL *> RBL) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge WWL *> (RBL : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(negedge WWL &&& (ENABLE_RWL == 1'b1), negedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge WWL &&& (ENABLE_RWL == 1'b1), posedge WBL, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge WWL &&& (ENABLE_RWL == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule // RF1R1WS_X1M_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X9B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X9B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X9B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X7P5B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X7P5B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X7P5B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X6B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X6B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X6B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X5B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X5B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X5B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X4B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X4B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X4B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X3P5B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X3P5B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X3P5B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X3B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X3B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X3B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X2P5B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X2P5B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X2P5B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X2B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X2B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X2B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X1P7B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X1P7B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X1P7B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X1P4B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X1P4B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X1P4B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X1P2B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X1P2B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X1P2B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X1B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X1B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X1B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X16B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X16B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X16B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X13B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X13B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X13B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X11B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X11B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X11B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X0P8B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X0P8B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X0P8B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X0P7B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X0P7B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X0P7B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X0P6B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X0P6B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X0P6B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module PREICG_X0P5B_A12TL (ECK, CK, E, SE, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module PREICG_X0P5B_A12TL (ECK, CK, E, SE);
`endif
output ECK;
input  E, SE, CK;
reg NOTIFIER;

supply1 R, S;

  or       I0 (n1, SE, E);
  udp_tlat I1 (n0, n1, CK, R, S, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_NOT_SE ;
wire ENABLE_E_OR_SE ;
assign ENABLE_NOT_E_AND_NOT_SE  = (!E&!SE) ? 1'b1:1'b0;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_NOT_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SE==1'b0)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
$setuphold(posedge CK, negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify

endmodule //PREICG_X0P5B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X9B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X9B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X9B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X7P5B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X7P5B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X7P5B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X6B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X6B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X6B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X5B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X5B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X5B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X4B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X4B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X4B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X3P5B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X3P5B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X3P5B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X3B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X3B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X3B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X2P5B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X2P5B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X2P5B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X2B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X2B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X2B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X1P7B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X1P7B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X1P7B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X1P4B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X1P4B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X1P4B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X1P2B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X1P2B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X1P2B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X1B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X1B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X1B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X16B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X16B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X16B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X13B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X13B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X13B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X11B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X11B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X11B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X0P8B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X0P8B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X0P8B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X0P7B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X0P7B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X0P7B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X0P6B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X0P6B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X0P6B_A12TL
`endcelldefine
//$Id: ckgate.lang,v 1.4 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module POSTICG_X0P5B_A12TL (ECK, CK, E, SEN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module POSTICG_X0P5B_A12TL (ECK, CK, E, SEN);
`endif
output ECK;
input  E, SEN, CK;
reg NOTIFIER;

supply1 R, S;

  not      I0 (ovrd, SEN);
  udp_plat I1 (n0, ovrd, CK, E, NOTIFIER);
  and      I2 (ECK, n0, CK);
wire ENABLE_NOT_E_AND_SEN ;
wire ENABLE_E_AND_SEN ;
wire ENABLE_SEN ;
wire ENABLE_CK ;
assign ENABLE_NOT_E_AND_SEN  = (!E&SEN) ? 1'b1:1'b0;
assign ENABLE_E_AND_SEN  = (E&SEN) ? 1'b1:1'b0;
assign ENABLE_SEN  = (SEN) ? 1'b1:1'b0;
assign ENABLE_CK  = (CK) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK &&& (ENABLE_E_AND_SEN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SEN == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (E==1'b0 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b0)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SEN==1'b1)
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b0 && SEN==1'b1)
(negedge CK *> (ECK : 1'bx)) = (`ARM_PROP_DELAY);
if(E==1'b0)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
if(E==1'b1)
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SEN *> (ECK +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SEN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SEN &&& (ENABLE_CK == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify

endmodule //POSTICG_X0P5B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR6_X6M_A12TL (Y, A, B, C, D, E, F, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR6_X6M_A12TL (Y, A, B, C, D, E, F);
`endif
output Y;
input A, B, C, D, E, F;

  or (Y, A, B, C, D, E, F);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(E *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(F *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR6_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR6_X4M_A12TL (Y, A, B, C, D, E, F, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR6_X4M_A12TL (Y, A, B, C, D, E, F);
`endif
output Y;
input A, B, C, D, E, F;

  or (Y, A, B, C, D, E, F);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(E *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(F *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR6_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR6_X3M_A12TL (Y, A, B, C, D, E, F, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR6_X3M_A12TL (Y, A, B, C, D, E, F);
`endif
output Y;
input A, B, C, D, E, F;

  or (Y, A, B, C, D, E, F);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(E *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(F *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR6_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR6_X2M_A12TL (Y, A, B, C, D, E, F, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR6_X2M_A12TL (Y, A, B, C, D, E, F);
`endif
output Y;
input A, B, C, D, E, F;

  or (Y, A, B, C, D, E, F);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(E *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(F *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR6_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR6_X1P4M_A12TL (Y, A, B, C, D, E, F, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR6_X1P4M_A12TL (Y, A, B, C, D, E, F);
`endif
output Y;
input A, B, C, D, E, F;

  or (Y, A, B, C, D, E, F);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(E *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(F *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR6_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR6_X1M_A12TL (Y, A, B, C, D, E, F, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR6_X1M_A12TL (Y, A, B, C, D, E, F);
`endif
output Y;
input A, B, C, D, E, F;

  or (Y, A, B, C, D, E, F);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(E *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(F *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR6_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR6_X0P7M_A12TL (Y, A, B, C, D, E, F, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR6_X0P7M_A12TL (Y, A, B, C, D, E, F);
`endif
output Y;
input A, B, C, D, E, F;

  or (Y, A, B, C, D, E, F);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(E *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(F *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR6_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR6_X0P5M_A12TL (Y, A, B, C, D, E, F, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR6_X0P5M_A12TL (Y, A, B, C, D, E, F);
`endif
output Y;
input A, B, C, D, E, F;

  or (Y, A, B, C, D, E, F);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(E *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(F *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR6_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR4_X8M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR4_X8M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  or (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR4_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR4_X6M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR4_X6M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  or (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR4_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR4_X4M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR4_X4M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  or (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR4_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR4_X3M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR4_X3M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  or (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR4_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR4_X2M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR4_X2M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  or (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR4_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR4_X1P4M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR4_X1P4M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  or (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR4_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR4_X1M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR4_X1M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  or (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR4_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR4_X0P7M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR4_X0P7M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  or (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR4_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR4_X0P5M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR4_X0P5M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  or (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR4_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR3_X8M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR3_X8M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  or (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR3_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR3_X6M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR3_X6M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  or (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR3_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR3_X4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR3_X4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  or (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR3_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR3_X3M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR3_X3M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  or (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR3_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR3_X2M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR3_X2M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  or (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR3_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR3_X1P4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR3_X1P4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  or (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR3_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR3_X1M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR3_X1M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  or (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR3_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR3_X0P7M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR3_X0P7M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  or (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR3_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR3_X0P5M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR3_X0P5M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  or (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR3_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X8M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X8M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X6M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X6M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X3M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X3M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X2M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X2M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X1P4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X1P4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X1M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X1M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X11M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X11M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X11M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X0P7M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X0P7M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OR2_X0P5M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OR2_X0P5M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  or (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OR2_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI2XB1_X8M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI2XB1_X8M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not  I0 (outA1, A1N);
  or   I1 (outA, A0, outA1);
  nand I2 (Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI2XB1_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI2XB1_X6M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI2XB1_X6M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not  I0 (outA1, A1N);
  or   I1 (outA, A0, outA1);
  nand I2 (Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI2XB1_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI2XB1_X4M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI2XB1_X4M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not  I0 (outA1, A1N);
  or   I1 (outA, A0, outA1);
  nand I2 (Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI2XB1_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI2XB1_X3M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI2XB1_X3M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not  I0 (outA1, A1N);
  or   I1 (outA, A0, outA1);
  nand I2 (Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI2XB1_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI2XB1_X2M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI2XB1_X2M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not  I0 (outA1, A1N);
  or   I1 (outA, A0, outA1);
  nand I2 (Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI2XB1_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI2XB1_X1P4M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI2XB1_X1P4M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not  I0 (outA1, A1N);
  or   I1 (outA, A0, outA1);
  nand I2 (Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI2XB1_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI2XB1_X1M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI2XB1_X1M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not  I0 (outA1, A1N);
  or   I1 (outA, A0, outA1);
  nand I2 (Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI2XB1_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI2XB1_X0P7M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI2XB1_X0P7M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not  I0 (outA1, A1N);
  or   I1 (outA, A0, outA1);
  nand I2 (Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI2XB1_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI2XB1_X0P5M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI2XB1_X0P5M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not  I0 (outA1, A1N);
  or   I1 (outA, A0, outA1);
  nand I2 (Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI2XB1_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI22_X8M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI22_X8M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI22_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI22_X6M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI22_X6M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI22_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI22_X4M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI22_X4M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI22_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI22_X3M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI22_X3M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI22_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI22_X2M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI22_X2M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI22_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI22_X1P4M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI22_X1P4M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI22_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI22_X1M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI22_X1M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI22_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI22_X0P7M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI22_X0P7M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI22_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI22_X0P5M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI22_X0P5M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI22_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI222_X4M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI222_X4M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  or   I2(outC, C0, C1);
  nand I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI222_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI222_X3M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI222_X3M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  or   I2(outC, C0, C1);
  nand I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI222_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI222_X2M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI222_X2M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  or   I2(outC, C0, C1);
  nand I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI222_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI222_X1P4M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI222_X1P4M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  or   I2(outC, C0, C1);
  nand I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI222_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI222_X1M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI222_X1M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  or   I2(outC, C0, C1);
  nand I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI222_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI222_X0P7M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI222_X0P7M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  or   I2(outC, C0, C1);
  nand I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI222_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI222_X0P5M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI222_X0P5M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  or   I2(outC, C0, C1);
  nand I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1 && C0==1'b1 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && C0==1'b1 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI222_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI221_X4M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI221_X4M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI221_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI221_X3M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI221_X3M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI221_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI221_X2M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI221_X2M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI221_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI221_X1P4M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI221_X1P4M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI221_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI221_X1M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI221_X1M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI221_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI221_X0P7M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI221_X0P7M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI221_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI221_X0P5M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI221_X0P5M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  nand I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && B0==1'b1 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI221_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21B_X8M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21B_X8M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  not  I0 (outB, B0N);
  or   I1 (outA, A0,  A1);
  nand I2 (Y, outA, outB);
 specify
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21B_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21B_X6M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21B_X6M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  not  I0 (outB, B0N);
  or   I1 (outA, A0,  A1);
  nand I2 (Y, outA, outB);
 specify
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21B_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21B_X4M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21B_X4M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  not  I0 (outB, B0N);
  or   I1 (outA, A0,  A1);
  nand I2 (Y, outA, outB);
 specify
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21B_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21B_X3M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21B_X3M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  not  I0 (outB, B0N);
  or   I1 (outA, A0,  A1);
  nand I2 (Y, outA, outB);
 specify
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21B_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21B_X2M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21B_X2M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  not  I0 (outB, B0N);
  or   I1 (outA, A0,  A1);
  nand I2 (Y, outA, outB);
 specify
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21B_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21B_X1P4M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21B_X1P4M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  not  I0 (outB, B0N);
  or   I1 (outA, A0,  A1);
  nand I2 (Y, outA, outB);
 specify
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21B_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21B_X1M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21B_X1M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  not  I0 (outB, B0N);
  or   I1 (outA, A0,  A1);
  nand I2 (Y, outA, outB);
 specify
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21B_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21B_X0P7M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21B_X0P7M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  not  I0 (outB, B0N);
  or   I1 (outA, A0,  A1);
  nand I2 (Y, outA, outB);
 specify
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21B_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21B_X0P5M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21B_X0P5M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  not  I0 (outB, B0N);
  or   I1 (outA, A0,  A1);
  nand I2 (Y, outA, outB);
 specify
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21B_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21_X8M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21_X8M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21_X6M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21_X6M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21_X4M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21_X4M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21_X3M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21_X3M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21_X2M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21_X2M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21_X1P4M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21_X1P4M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21_X1M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21_X1M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21_X0P7M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21_X0P7M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI21_X0P5M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI21_X0P5M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI21_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI211_X4M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI211_X4M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI211_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI211_X3M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI211_X3M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI211_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI211_X2M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI211_X2M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI211_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI211_X1P4M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI211_X1P4M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI211_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI211_X1M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI211_X1M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI211_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI211_X0P7M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI211_X0P7M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI211_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OAI211_X0P5M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OAI211_X0P5M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  nand I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OAI211_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA22_X8M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA22_X8M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  and I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA22_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA22_X6M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA22_X6M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  and I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA22_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA22_X4M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA22_X4M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  and I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA22_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA22_X3M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA22_X3M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  and I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA22_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA22_X2M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA22_X2M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  and I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA22_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA22_X1P4M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA22_X1P4M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  and I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA22_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA22_X1M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA22_X1M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  and I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA22_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA22_X0P7M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA22_X0P7M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  and I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA22_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA22_X0P5M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA22_X0P5M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  or   I0(outA, A0, A1);
  or   I1(outB, B0, B1);
  and I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA22_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA21_X8M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA21_X8M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA21_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA21_X6M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA21_X6M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA21_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA21_X4M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA21_X4M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA21_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA21_X3M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA21_X3M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA21_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA21_X2M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA21_X2M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA21_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA21_X1P4M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA21_X1P4M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA21_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA21_X1M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA21_X1M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA21_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA21_X0P7M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA21_X0P7M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA21_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA21_X0P5M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA21_X0P5M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA21_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA211_X6M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA211_X6M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA211_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA211_X4M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA211_X4M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA211_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA211_X3M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA211_X3M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA211_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA211_X2M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA211_X2M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA211_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA211_X1P4M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA211_X1P4M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA211_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA211_X1M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA211_X1M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA211_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA211_X0P7M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA211_X0P7M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA211_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module OA211_X0P5M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module OA211_X0P5M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  or   I0(outA, A0, A1);
  and I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // OA211_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X4A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X4A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X3M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X3M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X3A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X3A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X3A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X2M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X2M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X2A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X2A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X2A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X1P4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X1P4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X1P4A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X1P4A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X1P4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X1M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X1M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X1A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X1A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X1A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X0P7M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X0P7M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X0P7A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X0P7A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X0P7A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X0P5M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X0P5M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR3_X0P5A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR3_X0P5A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nor (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR3_X0P5A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2XB_X8M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2XB_X8M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nor (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2XB_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2XB_X6M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2XB_X6M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nor (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2XB_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2XB_X4M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2XB_X4M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nor (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2XB_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2XB_X3M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2XB_X3M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nor (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2XB_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2XB_X2M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2XB_X2M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nor (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2XB_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2XB_X1P4M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2XB_X1P4M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nor (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2XB_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2XB_X1M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2XB_X1M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nor (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2XB_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2XB_X0P7M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2XB_X0P7M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nor (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2XB_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2XB_X0P5M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2XB_X0P5M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nor (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2XB_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2B_X8M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2B_X8M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nor (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2B_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2B_X6M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2B_X6M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nor (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2B_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2B_X4M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2B_X4M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nor (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2B_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2B_X3M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2B_X3M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nor (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2B_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2B_X2M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2B_X2M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nor (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2B_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2B_X1P4M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2B_X1P4M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nor (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2B_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2B_X1M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2B_X1M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nor (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2B_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2B_X0P7M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2B_X0P7M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nor (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2B_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2B_X0P5M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2B_X0P5M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nor (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2B_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X8M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X8M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X8A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X8A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X8A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X6M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X6M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X6A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X6A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X6A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X4A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X4A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X3M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X3M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X3A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X3A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X3A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X2M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X2M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X2A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X2A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X2A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X1P4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X1P4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X1P4A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X1P4A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X1P4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X1M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X1M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X1A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X1A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X1A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X0P7M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X0P7M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X0P7A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X0P7A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X0P7A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X0P5M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X0P5M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NOR2_X0P5A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NOR2_X0P5A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nor (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NOR2_X0P5A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4XXXB_X4M_A12TL (Y, A, B, C, DN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4XXXB_X4M_A12TL (Y, A, B, C, DN);
`endif
output Y;
input A, B, C, DN;

  not (Dx, DN);
  nand (Y, A, B, C, Dx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(DN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4XXXB_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4XXXB_X3M_A12TL (Y, A, B, C, DN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4XXXB_X3M_A12TL (Y, A, B, C, DN);
`endif
output Y;
input A, B, C, DN;

  not (Dx, DN);
  nand (Y, A, B, C, Dx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(DN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4XXXB_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4XXXB_X2M_A12TL (Y, A, B, C, DN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4XXXB_X2M_A12TL (Y, A, B, C, DN);
`endif
output Y;
input A, B, C, DN;

  not (Dx, DN);
  nand (Y, A, B, C, Dx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(DN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4XXXB_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4XXXB_X1P4M_A12TL (Y, A, B, C, DN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4XXXB_X1P4M_A12TL (Y, A, B, C, DN);
`endif
output Y;
input A, B, C, DN;

  not (Dx, DN);
  nand (Y, A, B, C, Dx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(DN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4XXXB_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4XXXB_X1M_A12TL (Y, A, B, C, DN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4XXXB_X1M_A12TL (Y, A, B, C, DN);
`endif
output Y;
input A, B, C, DN;

  not (Dx, DN);
  nand (Y, A, B, C, Dx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(DN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4XXXB_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4XXXB_X0P7M_A12TL (Y, A, B, C, DN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4XXXB_X0P7M_A12TL (Y, A, B, C, DN);
`endif
output Y;
input A, B, C, DN;

  not (Dx, DN);
  nand (Y, A, B, C, Dx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(DN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4XXXB_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4XXXB_X0P5M_A12TL (Y, A, B, C, DN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4XXXB_X0P5M_A12TL (Y, A, B, C, DN);
`endif
output Y;
input A, B, C, DN;

  not (Dx, DN);
  nand (Y, A, B, C, Dx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(DN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4XXXB_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4B_X4M_A12TL (Y, AN, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4B_X4M_A12TL (Y, AN, B, C, D);
`endif
output Y;
input AN, B, C, D;

  not (Ax, AN);
  nand (Y, Ax, B, C, D);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4B_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4B_X3M_A12TL (Y, AN, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4B_X3M_A12TL (Y, AN, B, C, D);
`endif
output Y;
input AN, B, C, D;

  not (Ax, AN);
  nand (Y, Ax, B, C, D);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4B_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4B_X2M_A12TL (Y, AN, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4B_X2M_A12TL (Y, AN, B, C, D);
`endif
output Y;
input AN, B, C, D;

  not (Ax, AN);
  nand (Y, Ax, B, C, D);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4B_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4B_X1P4M_A12TL (Y, AN, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4B_X1P4M_A12TL (Y, AN, B, C, D);
`endif
output Y;
input AN, B, C, D;

  not (Ax, AN);
  nand (Y, Ax, B, C, D);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4B_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4B_X1M_A12TL (Y, AN, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4B_X1M_A12TL (Y, AN, B, C, D);
`endif
output Y;
input AN, B, C, D;

  not (Ax, AN);
  nand (Y, Ax, B, C, D);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4B_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4B_X0P7M_A12TL (Y, AN, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4B_X0P7M_A12TL (Y, AN, B, C, D);
`endif
output Y;
input AN, B, C, D;

  not (Ax, AN);
  nand (Y, Ax, B, C, D);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4B_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4B_X0P5M_A12TL (Y, AN, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4B_X0P5M_A12TL (Y, AN, B, C, D);
`endif
output Y;
input AN, B, C, D;

  not (Ax, AN);
  nand (Y, Ax, B, C, D);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4B_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X4M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X4M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X4A_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X4A_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X3M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X3M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X3A_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X3A_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X3A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X2M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X2M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X2A_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X2A_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X2A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X1P4M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X1P4M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X1P4A_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X1P4A_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X1P4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X1M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X1M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X1A_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X1A_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X1A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X0P7M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X0P7M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X0P7A_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X0P7A_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X0P7A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X0P5M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X0P5M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND4_X0P5A_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND4_X0P5A_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  nand (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND4_X0P5A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3XXB_X6M_A12TL (Y, A, B, CN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3XXB_X6M_A12TL (Y, A, B, CN);
`endif
output Y;
input A, B, CN;

  not (Cx, CN);
  nand (Y, A, B, Cx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(CN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3XXB_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3XXB_X4M_A12TL (Y, A, B, CN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3XXB_X4M_A12TL (Y, A, B, CN);
`endif
output Y;
input A, B, CN;

  not (Cx, CN);
  nand (Y, A, B, Cx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(CN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3XXB_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3XXB_X3M_A12TL (Y, A, B, CN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3XXB_X3M_A12TL (Y, A, B, CN);
`endif
output Y;
input A, B, CN;

  not (Cx, CN);
  nand (Y, A, B, Cx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(CN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3XXB_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3XXB_X2M_A12TL (Y, A, B, CN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3XXB_X2M_A12TL (Y, A, B, CN);
`endif
output Y;
input A, B, CN;

  not (Cx, CN);
  nand (Y, A, B, Cx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(CN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3XXB_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3XXB_X1P4M_A12TL (Y, A, B, CN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3XXB_X1P4M_A12TL (Y, A, B, CN);
`endif
output Y;
input A, B, CN;

  not (Cx, CN);
  nand (Y, A, B, Cx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(CN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3XXB_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3XXB_X1M_A12TL (Y, A, B, CN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3XXB_X1M_A12TL (Y, A, B, CN);
`endif
output Y;
input A, B, CN;

  not (Cx, CN);
  nand (Y, A, B, Cx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(CN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3XXB_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3XXB_X0P7M_A12TL (Y, A, B, CN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3XXB_X0P7M_A12TL (Y, A, B, CN);
`endif
output Y;
input A, B, CN;

  not (Cx, CN);
  nand (Y, A, B, Cx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(CN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3XXB_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3XXB_X0P5M_A12TL (Y, A, B, CN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3XXB_X0P5M_A12TL (Y, A, B, CN);
`endif
output Y;
input A, B, CN;

  not (Cx, CN);
  nand (Y, A, B, Cx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(CN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3XXB_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3B_X6M_A12TL (Y, AN, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3B_X6M_A12TL (Y, AN, B, C);
`endif
output Y;
input AN, B, C;

  not (Ax, AN);
  nand (Y, Ax, B, C);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3B_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3B_X4M_A12TL (Y, AN, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3B_X4M_A12TL (Y, AN, B, C);
`endif
output Y;
input AN, B, C;

  not (Ax, AN);
  nand (Y, Ax, B, C);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3B_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3B_X3M_A12TL (Y, AN, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3B_X3M_A12TL (Y, AN, B, C);
`endif
output Y;
input AN, B, C;

  not (Ax, AN);
  nand (Y, Ax, B, C);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3B_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3B_X2M_A12TL (Y, AN, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3B_X2M_A12TL (Y, AN, B, C);
`endif
output Y;
input AN, B, C;

  not (Ax, AN);
  nand (Y, Ax, B, C);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3B_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3B_X1P4M_A12TL (Y, AN, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3B_X1P4M_A12TL (Y, AN, B, C);
`endif
output Y;
input AN, B, C;

  not (Ax, AN);
  nand (Y, Ax, B, C);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3B_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3B_X1M_A12TL (Y, AN, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3B_X1M_A12TL (Y, AN, B, C);
`endif
output Y;
input AN, B, C;

  not (Ax, AN);
  nand (Y, Ax, B, C);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3B_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3B_X0P7M_A12TL (Y, AN, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3B_X0P7M_A12TL (Y, AN, B, C);
`endif
output Y;
input AN, B, C;

  not (Ax, AN);
  nand (Y, Ax, B, C);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3B_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3B_X0P5M_A12TL (Y, AN, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3B_X0P5M_A12TL (Y, AN, B, C);
`endif
output Y;
input AN, B, C;

  not (Ax, AN);
  nand (Y, Ax, B, C);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3B_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X6M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X6M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X6A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X6A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X6A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X4A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X4A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X3M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X3M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X3A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X3A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X3A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X2M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X2M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X2A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X2A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X2A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X1P4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X1P4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X1P4A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X1P4A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X1P4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X1M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X1M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X1A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X1A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X1A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X0P7M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X0P7M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X0P7A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X0P7A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X0P7A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X0P5M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X0P5M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND3_X0P5A_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND3_X0P5A_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  nand (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND3_X0P5A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2XB_X8M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2XB_X8M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nand (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2XB_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2XB_X6M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2XB_X6M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nand (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2XB_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2XB_X4M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2XB_X4M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nand (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2XB_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2XB_X3M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2XB_X3M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nand (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2XB_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2XB_X2M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2XB_X2M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nand (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2XB_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2XB_X1P4M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2XB_X1P4M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nand (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2XB_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2XB_X1M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2XB_X1M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nand (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2XB_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2XB_X0P7M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2XB_X0P7M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nand (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2XB_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2XB_X0P5M_A12TL (Y, A, BN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2XB_X0P5M_A12TL (Y, A, BN);
`endif
output Y;
input A, BN;

  not (Bx, BN);
  nand (Y, A, Bx);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(BN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2XB_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2B_X8M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2B_X8M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nand (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2B_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2B_X6M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2B_X6M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nand (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2B_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2B_X4M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2B_X4M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nand (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2B_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2B_X3M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2B_X3M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nand (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2B_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2B_X2M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2B_X2M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nand (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2B_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2B_X1P4M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2B_X1P4M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nand (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2B_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2B_X1M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2B_X1M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nand (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2B_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2B_X0P7M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2B_X0P7M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nand (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2B_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2B_X0P5M_A12TL (Y, AN, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2B_X0P5M_A12TL (Y, AN, B);
`endif
output Y;
input AN, B;

  not (Ax, AN);
  nand (Y, Ax, B);
 specify
(AN *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2B_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X8M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X8M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X8B_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X8B_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X8B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X8A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X8A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X8A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X6M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X6M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X6B_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X6B_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X6B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X6A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X6A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X6A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X4B_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X4B_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X4B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X4A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X4A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X3M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X3M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X3B_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X3B_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X3B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X3A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X3A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X3A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X2M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X2M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X2B_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X2B_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X2B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X2A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X2A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X2A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X1P4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X1P4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X1P4B_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X1P4B_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X1P4B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X1P4A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X1P4A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X1P4A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X1M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X1M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X1B_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X1B_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X1B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X1A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X1A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X1A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X0P7M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X0P7M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X0P7B_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X0P7B_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X0P7B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X0P7A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X0P7A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X0P7A_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X0P5M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X0P5M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X0P5B_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X0P5B_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X0P5B_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module NAND2_X0P5A_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module NAND2_X0P5A_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  nand (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // NAND2_X0P5A_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT4_X3M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT4_X3M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(Y, A, B, C, D, S0, S1);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT4_X3M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT4_X2M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT4_X2M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(Y, A, B, C, D, S0, S1);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT4_X2M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT4_X1P4M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT4_X1P4M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(Y, A, B, C, D, S0, S1);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT4_X1P4M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT4_X1M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT4_X1M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(Y, A, B, C, D, S0, S1);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT4_X1M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT4_X0P7M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT4_X0P7M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(Y, A, B, C, D, S0, S1);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT4_X0P7M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT4_X0P5M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT4_X0P5M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(Y, A, B, C, D, S0, S1);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT4_X0P5M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT2_X6M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT2_X6M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT2_X6M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT2_X4M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT2_X4M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT2_X4M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT2_X3M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT2_X3M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT2_X3M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT2_X2M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT2_X2M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT2_X2M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT2_X1P4M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT2_X1P4M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT2_X1P4M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT2_X1M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT2_X1M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT2_X1M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT2_X0P7M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT2_X0P7M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT2_X0P7M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXT2_X0P5M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXT2_X0P5M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXT2_X0P5M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT4_X3M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT4_X3M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(YN, A, B, C, D, S0, S1);
  not      u1(Y, YN);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT4_X3M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT4_X2M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT4_X2M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(YN, A, B, C, D, S0, S1);
  not      u1(Y, YN);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT4_X2M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT4_X1P4M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT4_X1P4M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(YN, A, B, C, D, S0, S1);
  not      u1(Y, YN);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT4_X1P4M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT4_X1M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT4_X1M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(YN, A, B, C, D, S0, S1);
  not      u1(Y, YN);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT4_X1M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT4_X0P7M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT4_X0P7M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(YN, A, B, C, D, S0, S1);
  not      u1(Y, YN);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT4_X0P7M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT4_X0P5M_A12TL (Y, A, B, C, D, S0, S1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT4_X0P5M_A12TL (Y, A, B, C, D, S0, S1);
`endif
output Y;
input A, B, C, D, S0, S1;

  udp_mux4 u0(YN, A, B, C, D, S0, S1);
  not      u1(Y, YN);
 specify
if (B==1'b0 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b0 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && C==1'b1 && D==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b0 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && C==1'b1 && D==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b0)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && D==1'b1)
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1)
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S1==1'b0)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S1==1'b1)
(S0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b1 && D==1'b1 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b0 && D==1'b1 && S0==1'b0)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && C==1'b1 && D==1'b0 && S0==1'b1)
(S1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge S1 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT4_X0P5M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT2_X4M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT2_X4M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(YN, A, B, S0);
  not      u1(Y, YN);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT2_X4M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT2_X3M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT2_X3M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(YN, A, B, S0);
  not      u1(Y, YN);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT2_X3M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT2_X2M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT2_X2M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(YN, A, B, S0);
  not      u1(Y, YN);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT2_X2M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT2_X1P4M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT2_X1P4M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(YN, A, B, S0);
  not      u1(Y, YN);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT2_X1P4M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT2_X1M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT2_X1M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(YN, A, B, S0);
  not      u1(Y, YN);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT2_X1M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT2_X0P7M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT2_X0P7M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(YN, A, B, S0);
  not      u1(Y, YN);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT2_X0P7M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MXIT2_X0P5M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MXIT2_X0P5M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(YN, A, B, S0);
  not      u1(Y, YN);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MXIT2_X0P5M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X8B_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X8B_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X8B_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X6M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X6M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X6M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X6B_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X6B_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X6B_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X4M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X4M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X4M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X4B_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X4B_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X4B_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X3M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X3M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X3M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X3B_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X3B_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X3B_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X2M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X2M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X2M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X2B_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X2B_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X2B_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X1P4M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X1P4M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X1P4M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X1P4B_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X1P4B_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X1P4B_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X1M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X1M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X1M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X1B_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X1B_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X1B_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X0P7M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X0P7M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X0P7M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X0P7B_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X0P7B_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X0P7B_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X0P5M_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X0P5M_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X0P5M_A12TL
`endcelldefine
//$Id: mux.lang,v 1.3 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module MX2_X0P5B_A12TL (Y, A, B, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module MX2_X0P5B_A12TL (Y, A, B, S0);
`endif
output Y;
input A, B, S0;

  udp_mux2 u0(Y, A, B, S0);
 specify
if (B==1'b0)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1)
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge S0 *> (Y : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // MX2_X0P5B_A12TL
`endcelldefine
//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2SDFFQN_X3M_A12TL (QN, CK, D0, D1, S0, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2SDFFQN_X3M_A12TL (QN, CK, D0, D1, S0, SE, SI);
`endif
output QN;
input D0, D1, S0, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_mux I0 (nm, D0, D1, S0);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I2 (n1, nm, SI, SE);
  not     I3 (QN, n0);
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_S0_AND_SE ;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (!D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (!D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (!D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI  = (!D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI  = (D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI  = (!D0&D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI  = (!D0&D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI  = (D0&!D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI  = (D0&!D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI  = (!D0&!D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI  = (!D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI  = (!D0&D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI  = (!D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI  = (D0&!D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI  = (D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI  = (D0&D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI  = (D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (!D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE  = (!D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE  = (!D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE  = (!D0&D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE  = (D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE  = (D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_SE  = (D0&D1&S0&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && D1==1'b0 && S0==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b1 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2SDFFQN_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2SDFFQN_X2M_A12TL (QN, CK, D0, D1, S0, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2SDFFQN_X2M_A12TL (QN, CK, D0, D1, S0, SE, SI);
`endif
output QN;
input D0, D1, S0, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_mux I0 (nm, D0, D1, S0);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I2 (n1, nm, SI, SE);
  not     I3 (QN, n0);
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_S0_AND_SE ;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (!D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (!D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (!D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI  = (!D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI  = (D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI  = (!D0&D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI  = (!D0&D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI  = (D0&!D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI  = (D0&!D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI  = (!D0&!D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI  = (!D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI  = (!D0&D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI  = (!D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI  = (D0&!D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI  = (D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI  = (D0&D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI  = (D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (!D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE  = (!D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE  = (!D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE  = (!D0&D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE  = (D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE  = (D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_SE  = (D0&D1&S0&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && D1==1'b0 && S0==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b1 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2SDFFQN_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2SDFFQN_X1M_A12TL (QN, CK, D0, D1, S0, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2SDFFQN_X1M_A12TL (QN, CK, D0, D1, S0, SE, SI);
`endif
output QN;
input D0, D1, S0, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_mux I0 (nm, D0, D1, S0);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I2 (n1, nm, SI, SE);
  not     I3 (QN, n0);
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_S0_AND_SE ;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (!D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (!D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (!D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI  = (!D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI  = (D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI  = (!D0&D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI  = (!D0&D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI  = (D0&!D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI  = (D0&!D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI  = (!D0&!D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI  = (!D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI  = (!D0&D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI  = (!D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI  = (D0&!D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI  = (D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI  = (D0&D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI  = (D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (!D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE  = (!D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE  = (!D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE  = (!D0&D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE  = (D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE  = (D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_SE  = (D0&D1&S0&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && D1==1'b0 && S0==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b1 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2SDFFQN_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2SDFFQN_X0P5M_A12TL (QN, CK, D0, D1, S0, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2SDFFQN_X0P5M_A12TL (QN, CK, D0, D1, S0, SE, SI);
`endif
output QN;
input D0, D1, S0, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_mux I0 (nm, D0, D1, S0);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I2 (n1, nm, SI, SE);
  not     I3 (QN, n0);
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_S0_AND_SE ;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (!D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (!D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (!D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI  = (!D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI  = (D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI  = (!D0&D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI  = (!D0&D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI  = (D0&!D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI  = (D0&!D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI  = (!D0&!D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI  = (!D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI  = (!D0&D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI  = (!D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI  = (D0&!D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI  = (D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI  = (D0&D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI  = (D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (!D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE  = (!D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE  = (!D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE  = (!D0&D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE  = (D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE  = (D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_SE  = (D0&D1&S0&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && D1==1'b0 && S0==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b1 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2SDFFQN_X0P5M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2SDFFQ_X4M_A12TL (Q, CK, D0, D1, S0, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2SDFFQ_X4M_A12TL (Q, CK, D0, D1, S0, SE, SI);
`endif
output Q;
input D0, D1, S0, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_mux I0 (nm, D0, D1, S0);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I2 (n1, nm, SI, SE);
  buf     I3 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_S0_AND_SE ;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (!D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (!D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (!D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI  = (!D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI  = (D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI  = (!D0&D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI  = (!D0&D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI  = (D0&!D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI  = (D0&!D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI  = (!D0&!D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI  = (!D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI  = (!D0&D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI  = (!D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI  = (D0&!D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI  = (D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI  = (D0&D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI  = (D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (!D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE  = (!D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE  = (!D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE  = (!D0&D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE  = (D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE  = (D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_SE  = (D0&D1&S0&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && D1==1'b0 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b0 && S0==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && SE==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2SDFFQ_X4M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2SDFFQ_X3M_A12TL (Q, CK, D0, D1, S0, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2SDFFQ_X3M_A12TL (Q, CK, D0, D1, S0, SE, SI);
`endif
output Q;
input D0, D1, S0, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_mux I0 (nm, D0, D1, S0);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I2 (n1, nm, SI, SE);
  buf     I3 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_S0_AND_SE ;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (!D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (!D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (!D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI  = (!D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI  = (D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI  = (!D0&D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI  = (!D0&D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI  = (D0&!D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI  = (D0&!D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI  = (!D0&!D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI  = (!D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI  = (!D0&D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI  = (!D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI  = (D0&!D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI  = (D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI  = (D0&D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI  = (D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (!D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE  = (!D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE  = (!D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE  = (!D0&D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE  = (D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE  = (D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_SE  = (D0&D1&S0&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && D1==1'b0 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b0 && S0==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && SE==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2SDFFQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2SDFFQ_X2M_A12TL (Q, CK, D0, D1, S0, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2SDFFQ_X2M_A12TL (Q, CK, D0, D1, S0, SE, SI);
`endif
output Q;
input D0, D1, S0, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_mux I0 (nm, D0, D1, S0);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I2 (n1, nm, SI, SE);
  buf     I3 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_S0_AND_SE ;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (!D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (!D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (!D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI  = (!D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI  = (D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI  = (!D0&D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI  = (!D0&D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI  = (D0&!D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI  = (D0&!D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI  = (!D0&!D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI  = (!D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI  = (!D0&D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI  = (!D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI  = (D0&!D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI  = (D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI  = (D0&D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI  = (D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (!D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE  = (!D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE  = (!D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE  = (!D0&D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE  = (D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE  = (D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_SE  = (D0&D1&S0&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && D1==1'b0 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b0 && S0==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && SE==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2SDFFQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2SDFFQ_X1M_A12TL (Q, CK, D0, D1, S0, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2SDFFQ_X1M_A12TL (Q, CK, D0, D1, S0, SE, SI);
`endif
output Q;
input D0, D1, S0, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_mux I0 (nm, D0, D1, S0);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I2 (n1, nm, SI, SE);
  buf     I3 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_S0_AND_SE ;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (!D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (!D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (!D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI  = (!D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI  = (D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI  = (!D0&D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI  = (!D0&D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI  = (D0&!D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI  = (D0&!D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI  = (!D0&!D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI  = (!D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI  = (!D0&D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI  = (!D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI  = (D0&!D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI  = (D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI  = (D0&D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI  = (D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (!D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE  = (!D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE  = (!D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE  = (!D0&D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE  = (D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE  = (D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_SE  = (D0&D1&S0&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && D1==1'b0 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b0 && S0==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && SE==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2SDFFQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2SDFFQ_X0P5M_A12TL (Q, CK, D0, D1, S0, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2SDFFQ_X0P5M_A12TL (Q, CK, D0, D1, S0, SE, SI);
`endif
output Q;
input D0, D1, S0, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  udp_mux I0 (nm, D0, D1, S0);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  udp_mux I2 (n1, nm, SI, SE);
  buf     I3 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI ;
wire ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE ;
wire ENABLE_D0_AND_D1_AND_S0_AND_SE ;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (!D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (!D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI  = (D1&!S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI  = (D1&!S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (!D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI  = (!D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI  = (D0&S0&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI  = (D0&S0&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI  = (!D0&D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI  = (!D0&D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI  = (D0&!D1&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI  = (D0&!D1&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI  = (!D0&!D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI  = (!D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI  = (!D0&D1&!S0&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI  = (!D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI  = (D0&!D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI  = (D0&!D1&S0&SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI  = (D0&D1&!S0&!SI) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI  = (D0&D1&S0&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (!D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE  = (!D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE  = (!D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE  = (!D0&D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE  = (D0&!D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE  = (D0&!D1&S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE  = (D0&D1&!S0&SE) ? 1'b1:1'b0;
assign ENABLE_D0_AND_D1_AND_S0_AND_SE  = (D0&D1&S0&SE) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0_AND_NOT_SE_AND_SI == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && D1==1'b0 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b0 && S0==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b0 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && SE==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b0 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b0 && S0==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b1 || D0==1'b0 && D1==1'b1 && S0==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && D1==1'b1 && S0==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_SE_AND_SI == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_NOT_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_D1_AND_S0_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2SDFFQ_X0P5M_A12TL
`endcelldefine
	

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2DFFQN_X3M_A12TL (QN, CK, D0, D1, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2DFFQN_X3M_A12TL (QN, CK, D0, D1, S0);
`endif
output QN;
input  D0, D1, S0, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_mux2 I0 (nm, D0, D1, S0);
  udp_dff  I1 (n0, nm, clk, xRN, xSN, NOTIFIER);
  not      I5 (QN, n0);
wire ENABLE_NOT_D1_AND_NOT_S0 ;
wire ENABLE_D1_AND_NOT_S0 ;
wire ENABLE_NOT_D0_AND_S0 ;
wire ENABLE_D0_AND_S0 ;
wire ENABLE_NOT_D0_AND_D1 ;
wire ENABLE_D0_AND_NOT_D1 ;
assign ENABLE_NOT_D1_AND_NOT_S0  = (!D1&!S0) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0  = (D1&!S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0  = (!D0&S0) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0  = (D0&S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1  = (!D0&D1) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1  = (D0&!D1) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && S0==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2DFFQN_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2DFFQN_X2M_A12TL (QN, CK, D0, D1, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2DFFQN_X2M_A12TL (QN, CK, D0, D1, S0);
`endif
output QN;
input  D0, D1, S0, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_mux2 I0 (nm, D0, D1, S0);
  udp_dff  I1 (n0, nm, clk, xRN, xSN, NOTIFIER);
  not      I5 (QN, n0);
wire ENABLE_NOT_D1_AND_NOT_S0 ;
wire ENABLE_D1_AND_NOT_S0 ;
wire ENABLE_NOT_D0_AND_S0 ;
wire ENABLE_D0_AND_S0 ;
wire ENABLE_NOT_D0_AND_D1 ;
wire ENABLE_D0_AND_NOT_D1 ;
assign ENABLE_NOT_D1_AND_NOT_S0  = (!D1&!S0) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0  = (D1&!S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0  = (!D0&S0) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0  = (D0&S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1  = (!D0&D1) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1  = (D0&!D1) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && S0==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2DFFQN_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2DFFQN_X1M_A12TL (QN, CK, D0, D1, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2DFFQN_X1M_A12TL (QN, CK, D0, D1, S0);
`endif
output QN;
input  D0, D1, S0, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_mux2 I0 (nm, D0, D1, S0);
  udp_dff  I1 (n0, nm, clk, xRN, xSN, NOTIFIER);
  not      I5 (QN, n0);
wire ENABLE_NOT_D1_AND_NOT_S0 ;
wire ENABLE_D1_AND_NOT_S0 ;
wire ENABLE_NOT_D0_AND_S0 ;
wire ENABLE_D0_AND_S0 ;
wire ENABLE_NOT_D0_AND_D1 ;
wire ENABLE_D0_AND_NOT_D1 ;
assign ENABLE_NOT_D1_AND_NOT_S0  = (!D1&!S0) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0  = (D1&!S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0  = (!D0&S0) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0  = (D0&S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1  = (!D0&D1) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1  = (D0&!D1) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && S0==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2DFFQN_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2DFFQN_X0P5M_A12TL (QN, CK, D0, D1, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2DFFQN_X0P5M_A12TL (QN, CK, D0, D1, S0);
`endif
output QN;
input  D0, D1, S0, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_mux2 I0 (nm, D0, D1, S0);
  udp_dff  I1 (n0, nm, clk, xRN, xSN, NOTIFIER);
  not      I5 (QN, n0);
wire ENABLE_NOT_D1_AND_NOT_S0 ;
wire ENABLE_D1_AND_NOT_S0 ;
wire ENABLE_NOT_D0_AND_S0 ;
wire ENABLE_D0_AND_S0 ;
wire ENABLE_NOT_D0_AND_D1 ;
wire ENABLE_D0_AND_NOT_D1 ;
assign ENABLE_NOT_D1_AND_NOT_S0  = (!D1&!S0) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0  = (D1&!S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0  = (!D0&S0) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0  = (D0&S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1  = (!D0&D1) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1  = (D0&!D1) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && S0==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2DFFQN_X0P5M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2DFFQ_X4M_A12TL (Q, CK, D0, D1, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2DFFQ_X4M_A12TL (Q, CK, D0, D1, S0);
`endif
output Q;
input  D0, D1, S0, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_mux2 I0 (nm, D0, D1, S0);
  udp_dff  I1 (n0, nm, clk, xRN, xSN, NOTIFIER);
  buf      I5 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0 ;
wire ENABLE_D1_AND_NOT_S0 ;
wire ENABLE_NOT_D0_AND_S0 ;
wire ENABLE_D0_AND_S0 ;
wire ENABLE_NOT_D0_AND_D1 ;
wire ENABLE_D0_AND_NOT_D1 ;
assign ENABLE_NOT_D1_AND_NOT_S0  = (!D1&!S0) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0  = (D1&!S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0  = (!D0&S0) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0  = (D0&S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1  = (!D0&D1) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1  = (D0&!D1) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2DFFQ_X4M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2DFFQ_X3M_A12TL (Q, CK, D0, D1, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2DFFQ_X3M_A12TL (Q, CK, D0, D1, S0);
`endif
output Q;
input  D0, D1, S0, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_mux2 I0 (nm, D0, D1, S0);
  udp_dff  I1 (n0, nm, clk, xRN, xSN, NOTIFIER);
  buf      I5 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0 ;
wire ENABLE_D1_AND_NOT_S0 ;
wire ENABLE_NOT_D0_AND_S0 ;
wire ENABLE_D0_AND_S0 ;
wire ENABLE_NOT_D0_AND_D1 ;
wire ENABLE_D0_AND_NOT_D1 ;
assign ENABLE_NOT_D1_AND_NOT_S0  = (!D1&!S0) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0  = (D1&!S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0  = (!D0&S0) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0  = (D0&S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1  = (!D0&D1) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1  = (D0&!D1) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2DFFQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2DFFQ_X2M_A12TL (Q, CK, D0, D1, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2DFFQ_X2M_A12TL (Q, CK, D0, D1, S0);
`endif
output Q;
input  D0, D1, S0, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_mux2 I0 (nm, D0, D1, S0);
  udp_dff  I1 (n0, nm, clk, xRN, xSN, NOTIFIER);
  buf      I5 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0 ;
wire ENABLE_D1_AND_NOT_S0 ;
wire ENABLE_NOT_D0_AND_S0 ;
wire ENABLE_D0_AND_S0 ;
wire ENABLE_NOT_D0_AND_D1 ;
wire ENABLE_D0_AND_NOT_D1 ;
assign ENABLE_NOT_D1_AND_NOT_S0  = (!D1&!S0) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0  = (D1&!S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0  = (!D0&S0) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0  = (D0&S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1  = (!D0&D1) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1  = (D0&!D1) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2DFFQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2DFFQ_X1M_A12TL (Q, CK, D0, D1, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2DFFQ_X1M_A12TL (Q, CK, D0, D1, S0);
`endif
output Q;
input  D0, D1, S0, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_mux2 I0 (nm, D0, D1, S0);
  udp_dff  I1 (n0, nm, clk, xRN, xSN, NOTIFIER);
  buf      I5 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0 ;
wire ENABLE_D1_AND_NOT_S0 ;
wire ENABLE_NOT_D0_AND_S0 ;
wire ENABLE_D0_AND_S0 ;
wire ENABLE_NOT_D0_AND_D1 ;
wire ENABLE_D0_AND_NOT_D1 ;
assign ENABLE_NOT_D1_AND_NOT_S0  = (!D1&!S0) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0  = (D1&!S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0  = (!D0&S0) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0  = (D0&S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1  = (!D0&D1) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1  = (D0&!D1) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2DFFQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module M2DFFQ_X0P5M_A12TL (Q, CK, D0, D1, S0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module M2DFFQ_X0P5M_A12TL (Q, CK, D0, D1, S0);
`endif
output Q;
input  D0, D1, S0, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_mux2 I0 (nm, D0, D1, S0);
  udp_dff  I1 (n0, nm, clk, xRN, xSN, NOTIFIER);
  buf      I5 (Q, n0);
wire ENABLE_NOT_D1_AND_NOT_S0 ;
wire ENABLE_D1_AND_NOT_S0 ;
wire ENABLE_NOT_D0_AND_S0 ;
wire ENABLE_D0_AND_S0 ;
wire ENABLE_NOT_D0_AND_D1 ;
wire ENABLE_D0_AND_NOT_D1 ;
assign ENABLE_NOT_D1_AND_NOT_S0  = (!D1&!S0) ? 1'b1:1'b0;
assign ENABLE_D1_AND_NOT_S0  = (D1&!S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_S0  = (!D0&S0) ? 1'b1:1'b0;
assign ENABLE_D0_AND_S0  = (D0&S0) ? 1'b1:1'b0;
assign ENABLE_NOT_D0_AND_D1  = (!D0&D1) ? 1'b1:1'b0;
assign ENABLE_D0_AND_NOT_D1  = (D0&!D1) ? 1'b1:1'b0;
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), negedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D1_AND_NOT_S0 == 1'b1), posedge D0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), negedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_S0 == 1'b1), posedge D1, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D0==1'b0 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b0 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D0==1'b1 && S0==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D1==1'b1 && S0==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D0_AND_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), negedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D0_AND_NOT_D1 == 1'b1), posedge S0, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // M2DFFQ_X0P5M_A12TL
`endcelldefine

//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATSQN_X4M_A12TL (QN, D, G, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATSQN_X4M_A12TL (QN, D, G, SN);
`endif
output  QN;
input  D, G, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_SN ;
wire ENABLE_NOT_G ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATSQN_X4M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATSQN_X3M_A12TL (QN, D, G, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATSQN_X3M_A12TL (QN, D, G, SN);
`endif
output  QN;
input  D, G, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_SN ;
wire ENABLE_NOT_G ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATSQN_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATSQN_X2M_A12TL (QN, D, G, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATSQN_X2M_A12TL (QN, D, G, SN);
`endif
output  QN;
input  D, G, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_SN ;
wire ENABLE_NOT_G ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATSQN_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATSQN_X1M_A12TL (QN, D, G, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATSQN_X1M_A12TL (QN, D, G, SN);
`endif
output  QN;
input  D, G, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_SN ;
wire ENABLE_NOT_G ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATSQN_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATSQN_X0P5M_A12TL (QN, D, G, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATSQN_X0P5M_A12TL (QN, D, G, SN);
`endif
output  QN;
input  D, G, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_SN ;
wire ENABLE_NOT_G ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATSQN_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATSPQ_X3M_A12TL (Q, D, G, S, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATSPQ_X3M_A12TL (Q, D, G, S);
`endif
output  Q;
input  D, G, S;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

not       XX0 (xSN, S);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
wire ENABLE_NOT_S ;
wire ENABLE_NOT_G ;
assign ENABLE_NOT_S  = (!S) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_NOT_S == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_NOT_S == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_NOT_S == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge S , negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge S &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATSPQ_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATSPQ_X2M_A12TL (Q, D, G, S, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATSPQ_X2M_A12TL (Q, D, G, S);
`endif
output  Q;
input  D, G, S;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

not       XX0 (xSN, S);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
wire ENABLE_NOT_S ;
wire ENABLE_NOT_G ;
assign ENABLE_NOT_S  = (!S) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_NOT_S == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_NOT_S == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_NOT_S == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge S , negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge S &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATSPQ_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATSPQ_X1M_A12TL (Q, D, G, S, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATSPQ_X1M_A12TL (Q, D, G, S);
`endif
output  Q;
input  D, G, S;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

not       XX0 (xSN, S);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
wire ENABLE_NOT_S ;
wire ENABLE_NOT_G ;
assign ENABLE_NOT_S  = (!S) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_NOT_S == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_NOT_S == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_NOT_S == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge S , negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge S &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATSPQ_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATSPQ_X0P5M_A12TL (Q, D, G, S, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATSPQ_X0P5M_A12TL (Q, D, G, S);
`endif
output  Q;
input  D, G, S;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

not       XX0 (xSN, S);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
wire ENABLE_NOT_S ;
wire ENABLE_NOT_G ;
assign ENABLE_NOT_S  = (!S) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_NOT_S == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_NOT_S == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_NOT_S == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge S , negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge S &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATSPQ_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATRQ_X3M_A12TL (Q, D, G, RN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATRQ_X3M_A12TL (Q, D, G, RN);
`endif
output  Q;
input  D, G, RN;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

buf       XX0 (xRN, RN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
wire ENABLE_RN ;
wire ENABLE_NOT_G ;
assign ENABLE_RN  = (RN) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_RN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_RN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_RN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(posedge RN, negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge RN &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATRQ_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATRQ_X2M_A12TL (Q, D, G, RN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATRQ_X2M_A12TL (Q, D, G, RN);
`endif
output  Q;
input  D, G, RN;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

buf       XX0 (xRN, RN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
wire ENABLE_RN ;
wire ENABLE_NOT_G ;
assign ENABLE_RN  = (RN) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_RN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_RN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_RN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(posedge RN, negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge RN &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATRQ_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATRQ_X1M_A12TL (Q, D, G, RN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATRQ_X1M_A12TL (Q, D, G, RN);
`endif
output  Q;
input  D, G, RN;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

buf       XX0 (xRN, RN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
wire ENABLE_RN ;
wire ENABLE_NOT_G ;
assign ENABLE_RN  = (RN) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_RN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_RN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_RN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(posedge RN, negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge RN &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATRQ_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATRQ_X0P5M_A12TL (Q, D, G, RN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATRQ_X0P5M_A12TL (Q, D, G, RN);
`endif
output  Q;
input  D, G, RN;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

buf       XX0 (xRN, RN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
wire ENABLE_RN ;
wire ENABLE_NOT_G ;
assign ENABLE_RN  = (RN) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_RN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_RN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_RN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(posedge RN, negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge RN &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATRQ_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATRPQN_X4M_A12TL (QN, D, G, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATRPQN_X4M_A12TL (QN, D, G, R);
`endif
output  QN;
input  D, G, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_G ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R , negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATRPQN_X4M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATRPQN_X3M_A12TL (QN, D, G, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATRPQN_X3M_A12TL (QN, D, G, R);
`endif
output  QN;
input  D, G, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_G ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R , negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATRPQN_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATRPQN_X2M_A12TL (QN, D, G, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATRPQN_X2M_A12TL (QN, D, G, R);
`endif
output  QN;
input  D, G, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_G ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R , negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATRPQN_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATRPQN_X1M_A12TL (QN, D, G, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATRPQN_X1M_A12TL (QN, D, G, R);
`endif
output  QN;
input  D, G, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_G ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R , negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATRPQN_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATRPQN_X0P5M_A12TL (QN, D, G, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATRPQN_X0P5M_A12TL (QN, D, G, R);
`endif
output  QN;
input  D, G, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
wire ENABLE_NOT_R ;
wire ENABLE_NOT_G ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_G  = (!G) ? 1'b1:1'b0;
 specify
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && G==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R , negedge G, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_NOT_G == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATRPQN_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATQN_X4M_A12TL (QN, D, G, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATQN_X4M_A12TL (QN, D, G);
`endif
output  QN;
input  D, G;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
 specify
$setuphold(negedge G, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATQN_X4M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATQN_X3M_A12TL (QN, D, G, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATQN_X3M_A12TL (QN, D, G);
`endif
output  QN;
input  D, G;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
 specify
$setuphold(negedge G, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATQN_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATQN_X2M_A12TL (QN, D, G, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATQN_X2M_A12TL (QN, D, G);
`endif
output  QN;
input  D, G;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
 specify
$setuphold(negedge G, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATQN_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATQN_X1M_A12TL (QN, D, G, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATQN_X1M_A12TL (QN, D, G);
`endif
output  QN;
input  D, G;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
 specify
$setuphold(negedge G, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATQN_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATQN_X0P5M_A12TL (QN, D, G, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATQN_X0P5M_A12TL (QN, D, G);
`endif
output  QN;
input  D, G;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
not I3(clk,G);
 specify
$setuphold(negedge G, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATQN_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATQ_X3M_A12TL (Q, D, G, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATQ_X3M_A12TL (Q, D, G);
`endif
output  Q;
input  D, G;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
 specify
$setuphold(negedge G, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G,`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATQ_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATQ_X2M_A12TL (Q, D, G, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATQ_X2M_A12TL (Q, D, G);
`endif
output  Q;
input  D, G;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
 specify
$setuphold(negedge G, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G,`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATQ_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATQ_X1M_A12TL (Q, D, G, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATQ_X1M_A12TL (Q, D, G);
`endif
output  Q;
input  D, G;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
 specify
$setuphold(negedge G, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G,`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATQ_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATQ_X0P5M_A12TL (Q, D, G, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATQ_X0P5M_A12TL (Q, D, G);
`endif
output  Q;
input  D, G;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
not I3(clk,G);
 specify
$setuphold(negedge G, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge G, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge G,`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge G *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATQ_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNSQN_X4M_A12TL (QN, D, GN, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNSQN_X4M_A12TL (QN, D, GN, SN);
`endif
output  QN;
input  D, GN, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_SN ;
wire ENABLE_GN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNSQN_X4M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNSQN_X3M_A12TL (QN, D, GN, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNSQN_X3M_A12TL (QN, D, GN, SN);
`endif
output  QN;
input  D, GN, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_SN ;
wire ENABLE_GN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNSQN_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNSQN_X2M_A12TL (QN, D, GN, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNSQN_X2M_A12TL (QN, D, GN, SN);
`endif
output  QN;
input  D, GN, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_SN ;
wire ENABLE_GN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNSQN_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNSQN_X1M_A12TL (QN, D, GN, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNSQN_X1M_A12TL (QN, D, GN, SN);
`endif
output  QN;
input  D, GN, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_SN ;
wire ENABLE_GN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNSQN_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNSQN_X0P5M_A12TL (QN, D, GN, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNSQN_X0P5M_A12TL (QN, D, GN, SN);
`endif
output  QN;
input  D, GN, SN;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

buf       XX0 (xSN, SN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_SN ;
wire ENABLE_GN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b0)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN -: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(posedge SN, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge SN &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNSQN_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNSPQ_X3M_A12TL (Q, D, GN, S, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNSPQ_X3M_A12TL (Q, D, GN, S);
`endif
output  Q;
input  D, GN, S;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

not       XX0 (xSN, S);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_NOT_S ;
wire ENABLE_GN ;
assign ENABLE_NOT_S  = (!S) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_NOT_S == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_NOT_S == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_NOT_S == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge S, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge S &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNSPQ_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNSPQ_X2M_A12TL (Q, D, GN, S, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNSPQ_X2M_A12TL (Q, D, GN, S);
`endif
output  Q;
input  D, GN, S;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

not       XX0 (xSN, S);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_NOT_S ;
wire ENABLE_GN ;
assign ENABLE_NOT_S  = (!S) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_NOT_S == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_NOT_S == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_NOT_S == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge S, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge S &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNSPQ_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNSPQ_X1M_A12TL (Q, D, GN, S, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNSPQ_X1M_A12TL (Q, D, GN, S);
`endif
output  Q;
input  D, GN, S;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

not       XX0 (xSN, S);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_NOT_S ;
wire ENABLE_GN ;
assign ENABLE_NOT_S  = (!S) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_NOT_S == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_NOT_S == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_NOT_S == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge S, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge S &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNSPQ_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNSPQ_X0P5M_A12TL (Q, D, GN, S, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNSPQ_X0P5M_A12TL (Q, D, GN, S);
`endif
output  Q;
input  D, GN, S;
reg NOTIFIER;
supply1 xRN;
supply1 dRN;

not       XX0 (xSN, S);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_NOT_S ;
wire ENABLE_GN ;
assign ENABLE_NOT_S  = (!S) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_NOT_S == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_NOT_S == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_NOT_S == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b0)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(posedge S *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge S, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge S &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNSPQ_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNRQ_X3M_A12TL (Q, D, GN, RN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNRQ_X3M_A12TL (Q, D, GN, RN);
`endif
output  Q;
input  D, GN, RN;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

buf       XX0 (xRN, RN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_RN ;
wire ENABLE_GN ;
assign ENABLE_RN  = (RN) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_RN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_RN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_RN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(posedge RN, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge RN &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNRQ_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNRQ_X2M_A12TL (Q, D, GN, RN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNRQ_X2M_A12TL (Q, D, GN, RN);
`endif
output  Q;
input  D, GN, RN;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

buf       XX0 (xRN, RN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_RN ;
wire ENABLE_GN ;
assign ENABLE_RN  = (RN) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_RN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_RN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_RN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(posedge RN, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge RN &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNRQ_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNRQ_X1M_A12TL (Q, D, GN, RN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNRQ_X1M_A12TL (Q, D, GN, RN);
`endif
output  Q;
input  D, GN, RN;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

buf       XX0 (xRN, RN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_RN ;
wire ENABLE_GN ;
assign ENABLE_RN  = (RN) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_RN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_RN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_RN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(posedge RN, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge RN &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNRQ_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNRQ_X0P5M_A12TL (Q, D, GN, RN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNRQ_X0P5M_A12TL (Q, D, GN, RN);
`endif
output  Q;
input  D, GN, RN;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

buf       XX0 (xRN, RN);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_RN ;
wire ENABLE_GN ;
assign ENABLE_RN  = (RN) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_RN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_RN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_RN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b0)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge RN *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(posedge RN, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(negedge RN &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNRQ_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNRPQN_X4M_A12TL (QN, D, GN, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNRPQN_X4M_A12TL (QN, D, GN, R);
`endif
output  QN;
input  D, GN, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_NOT_R ;
wire ENABLE_GN ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNRPQN_X4M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNRPQN_X3M_A12TL (QN, D, GN, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNRPQN_X3M_A12TL (QN, D, GN, R);
`endif
output  QN;
input  D, GN, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_NOT_R ;
wire ENABLE_GN ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNRPQN_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNRPQN_X2M_A12TL (QN, D, GN, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNRPQN_X2M_A12TL (QN, D, GN, R);
`endif
output  QN;
input  D, GN, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_NOT_R ;
wire ENABLE_GN ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNRPQN_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNRPQN_X1M_A12TL (QN, D, GN, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNRPQN_X1M_A12TL (QN, D, GN, R);
`endif
output  QN;
input  D, GN, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_NOT_R ;
wire ENABLE_GN ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNRPQN_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNRPQN_X0P5M_A12TL (QN, D, GN, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNRPQN_X0P5M_A12TL (QN, D, GN, R);
`endif
output  QN;
input  D, GN, R;
reg NOTIFIER;
supply1 xSN;
supply1 dSN;

not       XX0 (xRN, R);

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
wire ENABLE_NOT_R ;
wire ENABLE_GN ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_GN  = (GN) ? 1'b1:1'b0;
 specify
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(D==1'b0 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(D==1'b1 && GN==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge GN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_GN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule //LATNRPQN_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNQN_X4M_A12TL (QN, D, GN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNQN_X4M_A12TL (QN, D, GN);
`endif
output  QN;
input  D, GN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
 specify
$setuphold(posedge GN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATNQN_X4M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNQN_X3M_A12TL (QN, D, GN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNQN_X3M_A12TL (QN, D, GN);
`endif
output  QN;
input  D, GN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
 specify
$setuphold(posedge GN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATNQN_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNQN_X2M_A12TL (QN, D, GN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNQN_X2M_A12TL (QN, D, GN);
`endif
output  QN;
input  D, GN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
 specify
$setuphold(posedge GN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATNQN_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNQN_X1M_A12TL (QN, D, GN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNQN_X1M_A12TL (QN, D, GN);
`endif
output  QN;
input  D, GN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
 specify
$setuphold(posedge GN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATNQN_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNQN_X0P5M_A12TL (QN, D, GN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNQN_X0P5M_A12TL (QN, D, GN);
`endif
output  QN;
input  D, GN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
not      I2 (QN, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
 specify
$setuphold(posedge GN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN,`ARM_WIDTH,0,NOTIFIER);
(D *> QN) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATNQN_X0P5M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNQ_X3M_A12TL (Q, D, GN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNQ_X3M_A12TL (Q, D, GN);
`endif
output  Q;
input  D, GN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
 specify
$setuphold(posedge GN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN,`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATNQ_X3M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNQ_X2M_A12TL (Q, D, GN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNQ_X2M_A12TL (Q, D, GN);
`endif
output  Q;
input  D, GN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
 specify
$setuphold(posedge GN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN,`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATNQ_X2M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNQ_X1M_A12TL (Q, D, GN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNQ_X1M_A12TL (Q, D, GN);
`endif
output  Q;
input  D, GN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
 specify
$setuphold(posedge GN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN,`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATNQ_X1M_A12TL
`endcelldefine
//$Id: tlat.lang,v 1.6 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module LATNQ_X0P5M_A12TL (Q, D, GN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module LATNQ_X0P5M_A12TL (Q, D, GN);
`endif
output  Q;
input  D, GN;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dSN, dRN;

udp_tlat I0 (n0, D, clk, xRN, xSN, NOTIFIER);
buf      I1 (Q, n0);
buf      I3 (clk, GN);
not      I4 (flgclk, GN);
 specify
$setuphold(posedge GN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge GN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(negedge GN,`ARM_WIDTH,0,NOTIFIER);
(D *> Q) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge GN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule //LATNQ_X0P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X9M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X9M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X9M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X9B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X9B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X9B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X7P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X7P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X7P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X7P5B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X7P5B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X7P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X6M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X6M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X6M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X6B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X6B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X6B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X5M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X5B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X5B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X4M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X4M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X4M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X4B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X4B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X4B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X3P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X3P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X3P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X3P5B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X3P5B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X3P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X3M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X3M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X3M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X3B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X3B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X3B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X2P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X2P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X2P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X2P5B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X2P5B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X2P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X2M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X2M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X2M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X2B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X2B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X2B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X1P7M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X1P7M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X1P7M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X1P7B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X1P7B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X1P7B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X1P4M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X1P4M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X1P4M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X1P4B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X1P4B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X1P4B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X1P2M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X1P2M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X1P2M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X1P2B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X1P2B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X1P2B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X1M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X1M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X1M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X1B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X1B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X1B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X16M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X16M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X16M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X16B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X16B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X16B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X13M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X13M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X13M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X13B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X13B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X13B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X11M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X11M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X11M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X11B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X11B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X11B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X0P8M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X0P8M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X0P8M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X0P8B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X0P8B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X0P8B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X0P7M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X0P7M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X0P7M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X0P7B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X0P7B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X0P7B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X0P6M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X0P6M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X0P6M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X0P6B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X0P6B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X0P6B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X0P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X0P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X0P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module INV_X0P5B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module INV_X0P5B_A12TL ( Y, A );
`endif
output Y;
input A;

  not I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // INV_X0P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X9B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X9B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X9B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X7P5B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X7P5B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X7P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X6B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X6B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X6B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X5B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X5B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X4B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X4B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X4B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X3P5B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X3P5B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X3P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X3B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X3B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X3B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X2P5B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X2P5B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X2P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X2B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X2B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X2B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X1P7B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X1P7B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X1P7B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X1P4B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X1P4B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X1P4B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X1P2B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X1P2B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X1P2B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X1B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X1B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X1B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X16B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X16B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X16B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X13B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X13B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X13B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X11B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X11B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X11B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X0P8B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X0P8B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X0P8B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X0P7B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X0P7B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X0P7B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X0P6B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X0P6B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X0P6B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FRICG_X0P5B_A12TL ( ECK, CK , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FRICG_X0P5B_A12TL ( ECK, CK );
`endif
output ECK;
input CK;

  buf I0(ECK, CK);
 specify
(CK *> ECK) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // FRICG_X0P5B_A12TL
`endcelldefine
//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ESDFFQN_X3M_A12TL (QN, CK, D, E, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ESDFFQN_X3M_A12TL (QN, CK, D, E, SE, SI);
`endif
output QN;
input D, CK, E, SE, SI;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

   udp_sedff I0 (n0, D, CK, xRN, SI, SE, E, NOTIFIER);
   not       I1 (QN, n0);
wire ENABLE_E_OR_SE ;
wire ENABLE_E_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_E_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SI ;
wire ENABLE_NOT_D_AND_E_AND_SI ;
wire ENABLE_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_E_AND_SI ;
wire ENABLE_D_AND_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SE ;
wire ENABLE_NOT_D_AND_E_AND_SE ;
wire ENABLE_D_AND_NOT_E_AND_SE ;
wire ENABLE_D_AND_E_AND_SE ;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_NOT_SI  = (E&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_SI  = (E&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI  = (!D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SI  = (!D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SI  = (!D&E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_NOT_SI  = (D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SI  = (D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_NOT_SI  = (D&E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SE  = (!D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SE  = (!D&E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SE  = (D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_SE  = (D&E&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && E==1'b0 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b0 && E==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b0 && SE==1'b1 && SI==1'b1 || D==1'b0 && E==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b1 && E==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // ESDFFQN_X3M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ESDFFQN_X2M_A12TL (QN, CK, D, E, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ESDFFQN_X2M_A12TL (QN, CK, D, E, SE, SI);
`endif
output QN;
input D, CK, E, SE, SI;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

   udp_sedff I0 (n0, D, CK, xRN, SI, SE, E, NOTIFIER);
   not       I1 (QN, n0);
wire ENABLE_E_OR_SE ;
wire ENABLE_E_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_E_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SI ;
wire ENABLE_NOT_D_AND_E_AND_SI ;
wire ENABLE_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_E_AND_SI ;
wire ENABLE_D_AND_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SE ;
wire ENABLE_NOT_D_AND_E_AND_SE ;
wire ENABLE_D_AND_NOT_E_AND_SE ;
wire ENABLE_D_AND_E_AND_SE ;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_NOT_SI  = (E&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_SI  = (E&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI  = (!D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SI  = (!D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SI  = (!D&E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_NOT_SI  = (D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SI  = (D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_NOT_SI  = (D&E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SE  = (!D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SE  = (!D&E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SE  = (D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_SE  = (D&E&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && E==1'b0 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b0 && E==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b0 && SE==1'b1 && SI==1'b1 || D==1'b0 && E==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b1 && E==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // ESDFFQN_X2M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ESDFFQN_X1M_A12TL (QN, CK, D, E, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ESDFFQN_X1M_A12TL (QN, CK, D, E, SE, SI);
`endif
output QN;
input D, CK, E, SE, SI;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

   udp_sedff I0 (n0, D, CK, xRN, SI, SE, E, NOTIFIER);
   not       I1 (QN, n0);
wire ENABLE_E_OR_SE ;
wire ENABLE_E_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_E_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SI ;
wire ENABLE_NOT_D_AND_E_AND_SI ;
wire ENABLE_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_E_AND_SI ;
wire ENABLE_D_AND_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SE ;
wire ENABLE_NOT_D_AND_E_AND_SE ;
wire ENABLE_D_AND_NOT_E_AND_SE ;
wire ENABLE_D_AND_E_AND_SE ;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_NOT_SI  = (E&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_SI  = (E&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI  = (!D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SI  = (!D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SI  = (!D&E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_NOT_SI  = (D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SI  = (D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_NOT_SI  = (D&E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SE  = (!D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SE  = (!D&E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SE  = (D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_SE  = (D&E&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && E==1'b0 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b0 && E==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b0 && SE==1'b1 && SI==1'b1 || D==1'b0 && E==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b1 && E==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // ESDFFQN_X1M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ESDFFQN_X0P5M_A12TL (QN, CK, D, E, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ESDFFQN_X0P5M_A12TL (QN, CK, D, E, SE, SI);
`endif
output QN;
input D, CK, E, SE, SI;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

   udp_sedff I0 (n0, D, CK, xRN, SI, SE, E, NOTIFIER);
   not       I1 (QN, n0);
wire ENABLE_E_OR_SE ;
wire ENABLE_E_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_E_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SI ;
wire ENABLE_NOT_D_AND_E_AND_SI ;
wire ENABLE_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_E_AND_SI ;
wire ENABLE_D_AND_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SE ;
wire ENABLE_NOT_D_AND_E_AND_SE ;
wire ENABLE_D_AND_NOT_E_AND_SE ;
wire ENABLE_D_AND_E_AND_SE ;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_NOT_SI  = (E&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_SI  = (E&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI  = (!D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SI  = (!D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SI  = (!D&E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_NOT_SI  = (D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SI  = (D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_NOT_SI  = (D&E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SE  = (!D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SE  = (!D&E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SE  = (D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_SE  = (D&E&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && E==1'b0 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b0 && E==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b0 && SE==1'b1 && SI==1'b1 || D==1'b0 && E==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b1 && E==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // ESDFFQN_X0P5M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ESDFFQ_X3M_A12TL (Q, CK, D, E, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ESDFFQ_X3M_A12TL (Q, CK, D, E, SE, SI);
`endif
output Q;
input D, CK, E, SE, SI;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

   udp_sedff I0 (n0, D, CK, xRN, SI, SE, E, NOTIFIER);
   buf       I1 (Q, n0);
wire ENABLE_E_OR_SE ;
wire ENABLE_E_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_E_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SI ;
wire ENABLE_NOT_D_AND_E_AND_SI ;
wire ENABLE_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_E_AND_SI ;
wire ENABLE_D_AND_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SE ;
wire ENABLE_NOT_D_AND_E_AND_SE ;
wire ENABLE_D_AND_NOT_E_AND_SE ;
wire ENABLE_D_AND_E_AND_SE ;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_NOT_SI  = (E&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_SI  = (E&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI  = (!D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SI  = (!D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SI  = (!D&E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_NOT_SI  = (D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SI  = (D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_NOT_SI  = (D&E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SE  = (!D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SE  = (!D&E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SE  = (D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_SE  = (D&E&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && E==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b0 && E==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && E==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // ESDFFQ_X3M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ESDFFQ_X2M_A12TL (Q, CK, D, E, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ESDFFQ_X2M_A12TL (Q, CK, D, E, SE, SI);
`endif
output Q;
input D, CK, E, SE, SI;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

   udp_sedff I0 (n0, D, CK, xRN, SI, SE, E, NOTIFIER);
   buf       I1 (Q, n0);
wire ENABLE_E_OR_SE ;
wire ENABLE_E_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_E_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SI ;
wire ENABLE_NOT_D_AND_E_AND_SI ;
wire ENABLE_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_E_AND_SI ;
wire ENABLE_D_AND_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SE ;
wire ENABLE_NOT_D_AND_E_AND_SE ;
wire ENABLE_D_AND_NOT_E_AND_SE ;
wire ENABLE_D_AND_E_AND_SE ;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_NOT_SI  = (E&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_SI  = (E&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI  = (!D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SI  = (!D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SI  = (!D&E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_NOT_SI  = (D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SI  = (D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_NOT_SI  = (D&E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SE  = (!D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SE  = (!D&E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SE  = (D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_SE  = (D&E&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && E==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b0 && E==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && E==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // ESDFFQ_X2M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ESDFFQ_X1M_A12TL (Q, CK, D, E, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ESDFFQ_X1M_A12TL (Q, CK, D, E, SE, SI);
`endif
output Q;
input D, CK, E, SE, SI;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

   udp_sedff I0 (n0, D, CK, xRN, SI, SE, E, NOTIFIER);
   buf       I1 (Q, n0);
wire ENABLE_E_OR_SE ;
wire ENABLE_E_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_E_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SI ;
wire ENABLE_NOT_D_AND_E_AND_SI ;
wire ENABLE_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_E_AND_SI ;
wire ENABLE_D_AND_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SE ;
wire ENABLE_NOT_D_AND_E_AND_SE ;
wire ENABLE_D_AND_NOT_E_AND_SE ;
wire ENABLE_D_AND_E_AND_SE ;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_NOT_SI  = (E&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_SI  = (E&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI  = (!D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SI  = (!D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SI  = (!D&E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_NOT_SI  = (D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SI  = (D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_NOT_SI  = (D&E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SE  = (!D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SE  = (!D&E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SE  = (D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_SE  = (D&E&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && E==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b0 && E==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && E==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // ESDFFQ_X1M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ESDFFQ_X0P5M_A12TL (Q, CK, D, E, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ESDFFQ_X0P5M_A12TL (Q, CK, D, E, SE, SI);
`endif
output Q;
input D, CK, E, SE, SI;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

   udp_sedff I0 (n0, D, CK, xRN, SI, SE, E, NOTIFIER);
   buf       I1 (Q, n0);
wire ENABLE_E_OR_SE ;
wire ENABLE_E_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_E_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_SE_AND_SI ;
wire ENABLE_D_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SI ;
wire ENABLE_NOT_D_AND_E_AND_SI ;
wire ENABLE_D_AND_NOT_E_AND_NOT_SI ;
wire ENABLE_D_AND_NOT_E_AND_SI ;
wire ENABLE_D_AND_E_AND_NOT_SI ;
wire ENABLE_NOT_D_AND_NOT_E_AND_SE ;
wire ENABLE_NOT_D_AND_E_AND_SE ;
wire ENABLE_D_AND_NOT_E_AND_SE ;
wire ENABLE_D_AND_E_AND_SE ;
assign ENABLE_E_OR_SE  = (E | SE) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_NOT_SI  = (E&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_E_AND_NOT_SE_AND_SI  = (E&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI  = (!D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_SE_AND_SI  = (!D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_NOT_SI  = (D&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_SE_AND_SI  = (D&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI  = (!D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SI  = (!D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SI  = (!D&E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_NOT_SI  = (D&!E&!SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SI  = (D&!E&SI) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_NOT_SI  = (D&E&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_NOT_E_AND_SE  = (!D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_D_AND_E_AND_SE  = (!D&E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_NOT_E_AND_SE  = (D&!E&SE) ? 1'b1:1'b0;
assign ENABLE_D_AND_E_AND_SE  = (D&E&SE) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E_OR_SE == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E_AND_NOT_SE_AND_SI == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_SE_AND_SI == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
if (D==1'b0 && E==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b0 && E==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b0 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b0 && SI==1'b1 || D==1'b0 && E==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (D==1'b1 && E==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (E==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_NOT_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D_AND_E_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // ESDFFQ_X0P5M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module EDFFQN_X3M_A12TL (QN, CK, D, E, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module EDFFQN_X3M_A12TL (QN, CK, D, E);
`endif
output QN;
input D, CK, E;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

  udp_edff I0 (n0, D, CK, xRN, xSN, E, NOTIFIER);
  not      I1 (QN, n0);
wire ENABLE_E ;
wire ENABLE_NOT_D ;
wire ENABLE_D ;
assign ENABLE_E  = (E) ? 1'b1:1'b0;
assign ENABLE_NOT_D  = (!D) ? 1'b1:1'b0;
assign ENABLE_D  = (D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // EDFFQN_X3M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module EDFFQN_X2M_A12TL (QN, CK, D, E, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module EDFFQN_X2M_A12TL (QN, CK, D, E);
`endif
output QN;
input D, CK, E;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

  udp_edff I0 (n0, D, CK, xRN, xSN, E, NOTIFIER);
  not      I1 (QN, n0);
wire ENABLE_E ;
wire ENABLE_NOT_D ;
wire ENABLE_D ;
assign ENABLE_E  = (E) ? 1'b1:1'b0;
assign ENABLE_NOT_D  = (!D) ? 1'b1:1'b0;
assign ENABLE_D  = (D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // EDFFQN_X2M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module EDFFQN_X1M_A12TL (QN, CK, D, E, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module EDFFQN_X1M_A12TL (QN, CK, D, E);
`endif
output QN;
input D, CK, E;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

  udp_edff I0 (n0, D, CK, xRN, xSN, E, NOTIFIER);
  not      I1 (QN, n0);
wire ENABLE_E ;
wire ENABLE_NOT_D ;
wire ENABLE_D ;
assign ENABLE_E  = (E) ? 1'b1:1'b0;
assign ENABLE_NOT_D  = (!D) ? 1'b1:1'b0;
assign ENABLE_D  = (D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // EDFFQN_X1M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module EDFFQN_X0P5M_A12TL (QN, CK, D, E, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module EDFFQN_X0P5M_A12TL (QN, CK, D, E);
`endif
output QN;
input D, CK, E;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

  udp_edff I0 (n0, D, CK, xRN, xSN, E, NOTIFIER);
  not      I1 (QN, n0);
wire ENABLE_E ;
wire ENABLE_NOT_D ;
wire ENABLE_D ;
assign ENABLE_E  = (E) ? 1'b1:1'b0;
assign ENABLE_NOT_D  = (!D) ? 1'b1:1'b0;
assign ENABLE_D  = (D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // EDFFQN_X0P5M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module EDFFQ_X3M_A12TL (Q, CK, D, E, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module EDFFQ_X3M_A12TL (Q, CK, D, E);
`endif
output Q;
input D, CK, E;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

  udp_edff I0 (n0, D, CK, xRN, xSN, E, NOTIFIER);
  buf     B1 (Q, n0);
wire ENABLE_E ;
wire ENABLE_NOT_D ;
wire ENABLE_D ;
assign ENABLE_E  = (E) ? 1'b1:1'b0;
assign ENABLE_NOT_D  = (!D) ? 1'b1:1'b0;
assign ENABLE_D  = (D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // EDFFQ_X3M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module EDFFQ_X2M_A12TL (Q, CK, D, E, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module EDFFQ_X2M_A12TL (Q, CK, D, E);
`endif
output Q;
input D, CK, E;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

  udp_edff I0 (n0, D, CK, xRN, xSN, E, NOTIFIER);
  buf     B1 (Q, n0);
wire ENABLE_E ;
wire ENABLE_NOT_D ;
wire ENABLE_D ;
assign ENABLE_E  = (E) ? 1'b1:1'b0;
assign ENABLE_NOT_D  = (!D) ? 1'b1:1'b0;
assign ENABLE_D  = (D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // EDFFQ_X2M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module EDFFQ_X1M_A12TL (Q, CK, D, E, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module EDFFQ_X1M_A12TL (Q, CK, D, E);
`endif
output Q;
input D, CK, E;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

  udp_edff I0 (n0, D, CK, xRN, xSN, E, NOTIFIER);
  buf     B1 (Q, n0);
wire ENABLE_E ;
wire ENABLE_NOT_D ;
wire ENABLE_D ;
assign ENABLE_E  = (E) ? 1'b1:1'b0;
assign ENABLE_NOT_D  = (!D) ? 1'b1:1'b0;
assign ENABLE_D  = (D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // EDFFQ_X1M_A12TL
`endcelldefine


//$Id: edff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module EDFFQ_X0P5M_A12TL (Q, CK, D, E, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module EDFFQ_X0P5M_A12TL (Q, CK, D, E);
`endif
output Q;
input D, CK, E;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;

  udp_edff I0 (n0, D, CK, xRN, xSN, E, NOTIFIER);
  buf     B1 (Q, n0);
wire ENABLE_E ;
wire ENABLE_NOT_D ;
wire ENABLE_D ;
assign ENABLE_E  = (E) ? 1'b1:1'b0;
assign ENABLE_NOT_D  = (!D) ? 1'b1:1'b0;
assign ENABLE_D  = (D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_E == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_E == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), negedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_D == 1'b1), posedge E, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // EDFFQ_X0P5M_A12TL
`endcelldefine


//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DLY4_X0P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DLY4_X0P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // DLY4_X0P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DLY2_X0P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DLY2_X0P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // DLY2_X0P5M_A12TL
`endcelldefine
//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFYQ_X4M_A12TL (Q, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFYQ_X4M_A12TL (Q, CK, D);
`endif
output Q;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFYQ_X4M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFYQ_X3M_A12TL (Q, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFYQ_X3M_A12TL (Q, CK, D);
`endif
output Q;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFYQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFYQ_X2M_A12TL (Q, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFYQ_X2M_A12TL (Q, CK, D);
`endif
output Q;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFYQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFYQ_X1M_A12TL (Q, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFYQ_X1M_A12TL (Q, CK, D);
`endif
output Q;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFYQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSRPQ_X4M_A12TL (Q, CK, D, R, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSRPQ_X4M_A12TL (Q, CK, D, R, SN);
`endif
output Q;
input  D, CK, SN, R;
reg NOTIFIER;
  buf   XX0 (xSN, SN);
  not   XX1 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_R ;
wire ENABLE_NOT_CK_AND_NOT_D ;
wire ENABLE_NOT_CK_AND_D ;
wire ENABLE_CK_AND_NOT_D ;
wire ENABLE_CK_AND_D ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D  = (!CK&!D) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D  = (!CK&D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D  = (CK&!D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D  = (CK&D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_R == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // DFFSRPQ_X4M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSRPQ_X3M_A12TL (Q, CK, D, R, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSRPQ_X3M_A12TL (Q, CK, D, R, SN);
`endif
output Q;
input  D, CK, SN, R;
reg NOTIFIER;
  buf   XX0 (xSN, SN);
  not   XX1 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_R ;
wire ENABLE_NOT_CK_AND_NOT_D ;
wire ENABLE_NOT_CK_AND_D ;
wire ENABLE_CK_AND_NOT_D ;
wire ENABLE_CK_AND_D ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D  = (!CK&!D) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D  = (!CK&D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D  = (CK&!D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D  = (CK&D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_R == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // DFFSRPQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSRPQ_X2M_A12TL (Q, CK, D, R, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSRPQ_X2M_A12TL (Q, CK, D, R, SN);
`endif
output Q;
input  D, CK, SN, R;
reg NOTIFIER;
  buf   XX0 (xSN, SN);
  not   XX1 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_R ;
wire ENABLE_NOT_CK_AND_NOT_D ;
wire ENABLE_NOT_CK_AND_D ;
wire ENABLE_CK_AND_NOT_D ;
wire ENABLE_CK_AND_D ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D  = (!CK&!D) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D  = (!CK&D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D  = (CK&!D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D  = (CK&D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_R == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // DFFSRPQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSRPQ_X1M_A12TL (Q, CK, D, R, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSRPQ_X1M_A12TL (Q, CK, D, R, SN);
`endif
output Q;
input  D, CK, SN, R;
reg NOTIFIER;
  buf   XX0 (xSN, SN);
  not   XX1 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_R ;
wire ENABLE_NOT_CK_AND_NOT_D ;
wire ENABLE_NOT_CK_AND_D ;
wire ENABLE_CK_AND_NOT_D ;
wire ENABLE_CK_AND_D ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D  = (!CK&!D) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D  = (!CK&D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D  = (CK&!D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D  = (CK&D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_R == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // DFFSRPQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSRPQ_X0P5M_A12TL (Q, CK, D, R, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSRPQ_X0P5M_A12TL (Q, CK, D, R, SN);
`endif
output Q;
input  D, CK, SN, R;
reg NOTIFIER;
  buf   XX0 (xSN, SN);
  not   XX1 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_R ;
wire ENABLE_NOT_CK_AND_NOT_D ;
wire ENABLE_NOT_CK_AND_D ;
wire ENABLE_CK_AND_NOT_D ;
wire ENABLE_CK_AND_D ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_NOT_D  = (!CK&!D) ? 1'b1:1'b0;
assign ENABLE_NOT_CK_AND_D  = (!CK&D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_NOT_D  = (CK&!D) ? 1'b1:1'b0;
assign ENABLE_CK_AND_D  = (CK&D) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, posedge CK &&& (ENABLE_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK &&& (ENABLE_NOT_R == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CK_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CK_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // DFFSRPQ_X0P5M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSQN_X3M_A12TL (QN, CK, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSQN_X3M_A12TL (QN, CK, D, SN);
`endif
output QN;
input  D, CK, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFSQN_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSQN_X2M_A12TL (QN, CK, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSQN_X2M_A12TL (QN, CK, D, SN);
`endif
output QN;
input  D, CK, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFSQN_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSQN_X1M_A12TL (QN, CK, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSQN_X1M_A12TL (QN, CK, D, SN);
`endif
output QN;
input  D, CK, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFSQN_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSQN_X0P5M_A12TL (QN, CK, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSQN_X0P5M_A12TL (QN, CK, D, SN);
`endif
output QN;
input  D, CK, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (QN +: 1'b0)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFSQN_X0P5M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSQ_X4M_A12TL (Q, CK, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSQ_X4M_A12TL (Q, CK, D, SN);
`endif
output Q;
input  D, CK, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFSQ_X4M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSQ_X3M_A12TL (Q, CK, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSQ_X3M_A12TL (Q, CK, D, SN);
`endif
output Q;
input  D, CK, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFSQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSQ_X2M_A12TL (Q, CK, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSQ_X2M_A12TL (Q, CK, D, SN);
`endif
output Q;
input  D, CK, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFSQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSQ_X1M_A12TL (Q, CK, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSQ_X1M_A12TL (Q, CK, D, SN);
`endif
output Q;
input  D, CK, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFSQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFSQ_X0P5M_A12TL (Q, CK, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFSQ_X0P5M_A12TL (Q, CK, D, SN);
`endif
output Q;
input  D, CK, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFSQ_X0P5M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFRPQN_X3M_A12TL (QN, CK, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFRPQN_X3M_A12TL (QN, CK, D, R);
`endif
output QN;
input  D, CK, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFRPQN_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFRPQN_X2M_A12TL (QN, CK, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFRPQN_X2M_A12TL (QN, CK, D, R);
`endif
output QN;
input  D, CK, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFRPQN_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFRPQN_X1M_A12TL (QN, CK, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFRPQN_X1M_A12TL (QN, CK, D, R);
`endif
output QN;
input  D, CK, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFRPQN_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFRPQN_X0P5M_A12TL (QN, CK, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFRPQN_X0P5M_A12TL (QN, CK, D, R);
`endif
output QN;
input  D, CK, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (QN -: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFRPQN_X0P5M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFRPQ_X4M_A12TL (Q, CK, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFRPQ_X4M_A12TL (Q, CK, D, R);
`endif
output Q;
input  D, CK, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFRPQ_X4M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFRPQ_X3M_A12TL (Q, CK, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFRPQ_X3M_A12TL (Q, CK, D, R);
`endif
output Q;
input  D, CK, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFRPQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFRPQ_X2M_A12TL (Q, CK, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFRPQ_X2M_A12TL (Q, CK, D, R);
`endif
output Q;
input  D, CK, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFRPQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFRPQ_X1M_A12TL (Q, CK, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFRPQ_X1M_A12TL (Q, CK, D, R);
`endif
output Q;
input  D, CK, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFRPQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFRPQ_X0P5M_A12TL (Q, CK, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFRPQ_X0P5M_A12TL (Q, CK, D, R);
`endif
output Q;
input  D, CK, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CK &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CK==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, posedge CK, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFRPQ_X0P5M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFQN_X3M_A12TL (QN, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFQN_X3M_A12TL (QN, CK, D);
`endif
output QN;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFQN_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFQN_X2M_A12TL (QN, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFQN_X2M_A12TL (QN, CK, D);
`endif
output QN;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFQN_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFQN_X1M_A12TL (QN, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFQN_X1M_A12TL (QN, CK, D);
`endif
output QN;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFQN_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFQN_X0P5M_A12TL (QN, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFQN_X0P5M_A12TL (QN, CK, D);
`endif
output QN;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFQN_X0P5M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFQ_X4M_A12TL (Q, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFQ_X4M_A12TL (Q, CK, D);
`endif
output Q;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFQ_X4M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFQ_X3M_A12TL (Q, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFQ_X3M_A12TL (Q, CK, D);
`endif
output Q;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFQ_X2M_A12TL (Q, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFQ_X2M_A12TL (Q, CK, D);
`endif
output Q;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFQ_X1M_A12TL (Q, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFQ_X1M_A12TL (Q, CK, D);
`endif
output Q;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFQ_X0P5M_A12TL (Q, CK, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFQ_X0P5M_A12TL (Q, CK, D);
`endif
output Q;
input  D, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
$setuphold(posedge CK, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFQ_X0P5M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNSRPQ_X3M_A12TL (Q, CKN, D, R, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNSRPQ_X3M_A12TL (Q, CKN, D, R, SN);
`endif
output Q;
input  D, CKN, SN, R;
reg NOTIFIER;
  buf   XX0 (xSN, SN);
  not   XX1 (xRN, R);
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_R ;
wire ENABLE_NOT_CKN_AND_NOT_D ;
wire ENABLE_NOT_CKN_AND_D ;
wire ENABLE_CKN_AND_NOT_D ;
wire ENABLE_CKN_AND_D ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D  = (!CKN&!D) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D  = (!CKN&D) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D  = (CKN&!D) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D  = (CKN&D) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, negedge CKN &&& (ENABLE_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_R == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // DFFNSRPQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNSRPQ_X2M_A12TL (Q, CKN, D, R, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNSRPQ_X2M_A12TL (Q, CKN, D, R, SN);
`endif
output Q;
input  D, CKN, SN, R;
reg NOTIFIER;
  buf   XX0 (xSN, SN);
  not   XX1 (xRN, R);
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_R ;
wire ENABLE_NOT_CKN_AND_NOT_D ;
wire ENABLE_NOT_CKN_AND_D ;
wire ENABLE_CKN_AND_NOT_D ;
wire ENABLE_CKN_AND_D ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D  = (!CKN&!D) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D  = (!CKN&D) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D  = (CKN&!D) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D  = (CKN&D) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, negedge CKN &&& (ENABLE_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_R == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // DFFNSRPQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNSRPQ_X1M_A12TL (Q, CKN, D, R, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNSRPQ_X1M_A12TL (Q, CKN, D, R, SN);
`endif
output Q;
input  D, CKN, SN, R;
reg NOTIFIER;
  buf   XX0 (xSN, SN);
  not   XX1 (xRN, R);
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R_AND_SN ;
wire ENABLE_SN ;
wire ENABLE_NOT_R ;
wire ENABLE_NOT_CKN_AND_NOT_D ;
wire ENABLE_NOT_CKN_AND_D ;
wire ENABLE_CKN_AND_NOT_D ;
wire ENABLE_CKN_AND_D ;
assign ENABLE_NOT_R_AND_SN  = (!R&SN) ? 1'b1:1'b0;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_NOT_D  = (!CKN&!D) ? 1'b1:1'b0;
assign ENABLE_NOT_CKN_AND_D  = (!CKN&D) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_NOT_D  = (CKN&!D) ? 1'b1:1'b0;
assign ENABLE_CKN_AND_D  = (CKN&D) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R_AND_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1 && R==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$recrem(negedge R, negedge CKN &&& (ENABLE_SN == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$width(posedge R &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, negedge CKN &&& (ENABLE_NOT_R == 1'b1), `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_NOT_CKN_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_NOT_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$hold(negedge R &&& (ENABLE_CKN_AND_D == 1'b1),posedge SN,`ARM_HOLD_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_NOT_CKN_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_NOT_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$setup(posedge SN,negedge R &&& (ENABLE_CKN_AND_D == 1'b1) ,`ARM_SETUP_TIME,NOTIFIER);
$width(negedge SN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
endspecify
endmodule // DFFNSRPQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNSQ_X3M_A12TL (Q, CKN, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNSQ_X3M_A12TL (Q, CKN, D, SN);
`endif
output Q;
input  D, CKN, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, negedge CKN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFNSQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNSQ_X2M_A12TL (Q, CKN, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNSQ_X2M_A12TL (Q, CKN, D, SN);
`endif
output Q;
input  D, CKN, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, negedge CKN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFNSQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNSQ_X1M_A12TL (Q, CKN, D, SN, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNSQ_X1M_A12TL (Q, CKN, D, SN);
`endif
output Q;
input  D, CKN, SN;
reg NOTIFIER;
supply1 xRN;

  buf   XX0 (xSN, SN);
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_SN ;
assign ENABLE_SN  = (SN) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_SN == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_SN == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_SN == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1)
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
ifnone
(negedge SN *> (Q +: 1'b1)) = (`ARM_PROP_DELAY);
$width(negedge SN,`ARM_WIDTH,0,NOTIFIER);
$recrem(posedge SN, negedge CKN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFNSQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNRPQ_X3M_A12TL (Q, CKN, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNRPQ_X3M_A12TL (Q, CKN, D, R);
`endif
output Q;
input  D, CKN, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, negedge CKN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFNRPQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNRPQ_X2M_A12TL (Q, CKN, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNRPQ_X2M_A12TL (Q, CKN, D, R);
`endif
output Q;
input  D, CKN, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, negedge CKN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFNRPQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNRPQ_X1M_A12TL (Q, CKN, D, R, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNRPQ_X1M_A12TL (Q, CKN, D, R);
`endif
output Q;
input  D, CKN, R;
reg NOTIFIER;
supply1 xSN;

  not   XX0 (xRN, R);
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
wire ENABLE_NOT_R ;
assign ENABLE_NOT_R  = (!R) ? 1'b1:1'b0;
 specify
$width(negedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$width(posedge CKN &&& (ENABLE_NOT_R == 1'b1),`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R == 1'b1), negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN &&& (ENABLE_NOT_R == 1'b1), posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b0 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b0)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
if(CKN==1'b1 && D==1'b1)
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
ifnone
(posedge R *> (Q +: 1'b0)) = (`ARM_PROP_DELAY);
$width(posedge R,`ARM_WIDTH,0,NOTIFIER);
$recrem(negedge R, negedge CKN, `ARM_RECOVERY_TIME, `ARM_REMOVAL_TIME, NOTIFIER);
endspecify
endmodule // DFFNRPQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNQ_X3M_A12TL (Q, CKN, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNQ_X3M_A12TL (Q, CKN, D);
`endif
output Q;
input  D, CKN;
reg NOTIFIER;
supply1 xSN,xRN;
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CKN,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CKN,`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFNQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNQ_X2M_A12TL (Q, CKN, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNQ_X2M_A12TL (Q, CKN, D);
`endif
output Q;
input  D, CKN;
reg NOTIFIER;
supply1 xSN,xRN;
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CKN,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CKN,`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFNQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module DFFNQ_X1M_A12TL (Q, CKN, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module DFFNQ_X1M_A12TL (Q, CKN, D);
`endif
output Q;
input  D, CKN;
reg NOTIFIER;
supply1 xSN,xRN;
  not     IC (clk, CKN);
  udp_dff I0 (n0, D, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$width(posedge CKN,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CKN,`ARM_WIDTH,0,NOTIFIER);
$setuphold(negedge CKN, negedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(negedge CKN, posedge D, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
(negedge CKN *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // DFFNQ_X1M_A12TL
`endcelldefine

//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFZ_X8M_A12TL ( Y, A, OE , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFZ_X8M_A12TL ( Y, A, OE );
`endif
output Y;
input A, OE;

  bufif1 I0(Y, A, OE);
 specify
(OE *> Y) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFZ_X8M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFZ_X6M_A12TL ( Y, A, OE , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFZ_X6M_A12TL ( Y, A, OE );
`endif
output Y;
input A, OE;

  bufif1 I0(Y, A, OE);
 specify
(OE *> Y) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFZ_X6M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFZ_X4M_A12TL ( Y, A, OE , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFZ_X4M_A12TL ( Y, A, OE );
`endif
output Y;
input A, OE;

  bufif1 I0(Y, A, OE);
 specify
(OE *> Y) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFZ_X4M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFZ_X3M_A12TL ( Y, A, OE , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFZ_X3M_A12TL ( Y, A, OE );
`endif
output Y;
input A, OE;

  bufif1 I0(Y, A, OE);
 specify
(OE *> Y) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFZ_X3M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFZ_X2M_A12TL ( Y, A, OE , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFZ_X2M_A12TL ( Y, A, OE );
`endif
output Y;
input A, OE;

  bufif1 I0(Y, A, OE);
 specify
(OE *> Y) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFZ_X2M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFZ_X1P4M_A12TL ( Y, A, OE , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFZ_X1P4M_A12TL ( Y, A, OE );
`endif
output Y;
input A, OE;

  bufif1 I0(Y, A, OE);
 specify
(OE *> Y) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFZ_X1P4M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFZ_X1M_A12TL ( Y, A, OE , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFZ_X1M_A12TL ( Y, A, OE );
`endif
output Y;
input A, OE;

  bufif1 I0(Y, A, OE);
 specify
(OE *> Y) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFZ_X1M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFZ_X16M_A12TL ( Y, A, OE , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFZ_X16M_A12TL ( Y, A, OE );
`endif
output Y;
input A, OE;

  bufif1 I0(Y, A, OE);
 specify
(OE *> Y) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFZ_X16M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFZ_X11M_A12TL ( Y, A, OE , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFZ_X11M_A12TL ( Y, A, OE );
`endif
output Y;
input A, OE;

  bufif1 I0(Y, A, OE);
 specify
(OE *> Y) = (0, 0, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY, `ARM_PROP_DELAY);
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFZ_X11M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X9M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X9M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X9M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X7P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X7P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X7P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X6M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X6M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X6M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X4M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X4M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X4M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X3P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X3P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X3P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X3M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X3M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X3M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X2P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X2P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X2P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X2M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X2M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X2M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X1P7M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X1P7M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X1P7M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X1P4M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X1P4M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X1P4M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X1P2M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X1P2M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X1P2M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X1M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X1M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X1M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X16M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X16M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X16M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X13M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X13M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X13M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X11M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X11M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X11M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X0P8M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X0P8M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X0P8M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUFH_X0P7M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUFH_X0P7M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUFH_X0P7M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X9M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X9M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X9M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X9B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X9B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X9B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X7P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X7P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X7P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X7P5B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X7P5B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X7P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X6M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X6M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X6M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X6B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X6B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X6B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X5B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X5B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X4M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X4M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X4M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X4B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X4B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X4B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X3P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X3P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X3P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X3P5B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X3P5B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X3P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X3M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X3M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X3M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X3B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X3B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X3B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X2P5M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X2P5M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X2P5M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X2P5B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X2P5B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X2P5B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X2M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X2M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X2M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X2B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X2B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X2B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X1P7M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X1P7M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X1P7M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X1P7B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X1P7B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X1P7B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X1P4M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X1P4M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X1P4M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X1P4B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X1P4B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X1P4B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X1P2M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X1P2M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X1P2M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X1P2B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X1P2B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X1P2B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X1M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X1M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X1M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X1B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X1B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X1B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X16M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X16M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X16M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X16B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X16B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X16B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X13M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X13M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X13M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X13B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X13B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X13B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X11M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X11M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X11M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X11B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X11B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X11B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X0P8M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X0P8M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X0P8M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X0P8B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X0P8B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X0P8B_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X0P7M_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X0P7M_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X0P7M_A12TL
`endcelldefine
//$Id: buf.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module BUF_X0P7B_A12TL ( Y, A , VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module BUF_X0P7B_A12TL ( Y, A );
`endif
output Y;
input A;

  buf I0(Y, A);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify

endmodule // BUF_X0P7B_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI32_X6M_A12TL (Y, A0, A1, A2, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI32_X6M_A12TL (Y, A0, A1, A2, B0, B1);
`endif
output Y;
input A0, A1, A2, B0, B1;



  and I0(outA, A0, A1, A2);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI32_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI32_X4M_A12TL (Y, A0, A1, A2, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI32_X4M_A12TL (Y, A0, A1, A2, B0, B1);
`endif
output Y;
input A0, A1, A2, B0, B1;



  and I0(outA, A0, A1, A2);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI32_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI32_X3M_A12TL (Y, A0, A1, A2, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI32_X3M_A12TL (Y, A0, A1, A2, B0, B1);
`endif
output Y;
input A0, A1, A2, B0, B1;



  and I0(outA, A0, A1, A2);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI32_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI32_X2M_A12TL (Y, A0, A1, A2, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI32_X2M_A12TL (Y, A0, A1, A2, B0, B1);
`endif
output Y;
input A0, A1, A2, B0, B1;



  and I0(outA, A0, A1, A2);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI32_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI32_X1P4M_A12TL (Y, A0, A1, A2, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI32_X1P4M_A12TL (Y, A0, A1, A2, B0, B1);
`endif
output Y;
input A0, A1, A2, B0, B1;



  and I0(outA, A0, A1, A2);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI32_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI32_X1M_A12TL (Y, A0, A1, A2, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI32_X1M_A12TL (Y, A0, A1, A2, B0, B1);
`endif
output Y;
input A0, A1, A2, B0, B1;



  and I0(outA, A0, A1, A2);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI32_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI32_X0P7M_A12TL (Y, A0, A1, A2, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI32_X0P7M_A12TL (Y, A0, A1, A2, B0, B1);
`endif
output Y;
input A0, A1, A2, B0, B1;



  and I0(outA, A0, A1, A2);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI32_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI32_X0P5M_A12TL (Y, A0, A1, A2, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI32_X0P5M_A12TL (Y, A0, A1, A2, B0, B1);
`endif
output Y;
input A0, A1, A2, B0, B1;



  and I0(outA, A0, A1, A2);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI32_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI31_X6M_A12TL (Y, A0, A1, A2, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI31_X6M_A12TL (Y, A0, A1, A2, B0);
`endif
output Y;
input A0, A1, A2, B0;



  and I0(outA, A0, A1, A2);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI31_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI31_X4M_A12TL (Y, A0, A1, A2, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI31_X4M_A12TL (Y, A0, A1, A2, B0);
`endif
output Y;
input A0, A1, A2, B0;



  and I0(outA, A0, A1, A2);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI31_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI31_X3M_A12TL (Y, A0, A1, A2, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI31_X3M_A12TL (Y, A0, A1, A2, B0);
`endif
output Y;
input A0, A1, A2, B0;



  and I0(outA, A0, A1, A2);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI31_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI31_X2M_A12TL (Y, A0, A1, A2, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI31_X2M_A12TL (Y, A0, A1, A2, B0);
`endif
output Y;
input A0, A1, A2, B0;



  and I0(outA, A0, A1, A2);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI31_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI31_X1P4M_A12TL (Y, A0, A1, A2, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI31_X1P4M_A12TL (Y, A0, A1, A2, B0);
`endif
output Y;
input A0, A1, A2, B0;



  and I0(outA, A0, A1, A2);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI31_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI31_X1M_A12TL (Y, A0, A1, A2, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI31_X1M_A12TL (Y, A0, A1, A2, B0);
`endif
output Y;
input A0, A1, A2, B0;



  and I0(outA, A0, A1, A2);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI31_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI31_X0P7M_A12TL (Y, A0, A1, A2, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI31_X0P7M_A12TL (Y, A0, A1, A2, B0);
`endif
output Y;
input A0, A1, A2, B0;



  and I0(outA, A0, A1, A2);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI31_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI31_X0P5M_A12TL (Y, A0, A1, A2, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI31_X0P5M_A12TL (Y, A0, A1, A2, B0);
`endif
output Y;
input A0, A1, A2, B0;



  and I0(outA, A0, A1, A2);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && A2==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b1 && A2==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A2 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI31_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI2XB1_X8M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI2XB1_X8M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not I0 (outA1, A1N);
  and I1 (outA, A0, outA1);
  nor I2(Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI2XB1_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI2XB1_X6M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI2XB1_X6M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not I0 (outA1, A1N);
  and I1 (outA, A0, outA1);
  nor I2(Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI2XB1_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI2XB1_X4M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI2XB1_X4M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not I0 (outA1, A1N);
  and I1 (outA, A0, outA1);
  nor I2(Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI2XB1_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI2XB1_X3M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI2XB1_X3M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not I0 (outA1, A1N);
  and I1 (outA, A0, outA1);
  nor I2(Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI2XB1_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI2XB1_X2M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI2XB1_X2M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not I0 (outA1, A1N);
  and I1 (outA, A0, outA1);
  nor I2(Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI2XB1_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI2XB1_X1P4M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI2XB1_X1P4M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not I0 (outA1, A1N);
  and I1 (outA, A0, outA1);
  nor I2(Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI2XB1_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI2XB1_X1M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI2XB1_X1M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not I0 (outA1, A1N);
  and I1 (outA, A0, outA1);
  nor I2(Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI2XB1_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI2XB1_X0P7M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI2XB1_X0P7M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not I0 (outA1, A1N);
  and I1 (outA, A0, outA1);
  nor I2(Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI2XB1_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI2XB1_X0P5M_A12TL (Y, A0, A1N, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI2XB1_X0P5M_A12TL (Y, A0, A1N, B0);
`endif
output Y;
input A0, A1N, B0;



  not I0 (outA1, A1N);
  and I1 (outA, A0, outA1);
  nor I2(Y, B0, outA);
 specify
if (A0==1'b0 && A1N==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1N==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI2XB1_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI22_X8M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI22_X8M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI22_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI22_X6M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI22_X6M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI22_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI22_X4M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI22_X4M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI22_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI22_X3M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI22_X3M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI22_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI22_X2M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI22_X2M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI22_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI22_X1P4M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI22_X1P4M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI22_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI22_X1M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI22_X1M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI22_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI22_X0P7M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI22_X0P7M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI22_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI22_X0P5M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI22_X0P5M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI22_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI222_X4M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI222_X4M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  and I2(outC, C0, C1);
  nor I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI222_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI222_X3M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI222_X3M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  and I2(outC, C0, C1);
  nor I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI222_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI222_X2M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI222_X2M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  and I2(outC, C0, C1);
  nor I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI222_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI222_X1P4M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI222_X1P4M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  and I2(outC, C0, C1);
  nor I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI222_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI222_X1M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI222_X1M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  and I2(outC, C0, C1);
  nor I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI222_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI222_X0P7M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI222_X0P7M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  and I2(outC, C0, C1);
  nor I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI222_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI222_X0P5M_A12TL (Y, A0, A1, B0, B1, C0, C1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI222_X0P5M_A12TL (Y, A0, A1, B0, B1, C0, C1);
`endif
output Y;
input A0, A1, B0, B1, C0, C1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  and I2(outC, C0, C1);
  nor I3(Y, outA, outB, outC);
 specify
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b0 && C1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0 && C0==1'b1 && C1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b0 && C1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && C0==1'b1 && C1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI222_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI221_X4M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI221_X4M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI221_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI221_X3M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI221_X3M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI221_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI221_X2M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI221_X2M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI221_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI221_X1P4M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI221_X1P4M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI221_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI221_X1M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI221_X1M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI221_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI221_X0P7M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI221_X0P7M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI221_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI221_X0P5M_A12TL (Y, A0, A1, B0, B1, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI221_X0P5M_A12TL (Y, A0, A1, B0, B1, C0);
`endif
output Y;
input A0, A1, B0, B1, C0;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  nor I2(Y, C0, outB, outA);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b0 && B1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0 && B0==1'b1 && B1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI221_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21B_X8M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21B_X8M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1 (outB, B0N);
  nor I3 (Y,outA,outB);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21B_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21B_X6M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21B_X6M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1 (outB, B0N);
  nor I3 (Y,outA,outB);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21B_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21B_X4M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21B_X4M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1 (outB, B0N);
  nor I3 (Y,outA,outB);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21B_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21B_X3M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21B_X3M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1 (outB, B0N);
  nor I3 (Y,outA,outB);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21B_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21B_X2M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21B_X2M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1 (outB, B0N);
  nor I3 (Y,outA,outB);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21B_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21B_X1P4M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21B_X1P4M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1 (outB, B0N);
  nor I3 (Y,outA,outB);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21B_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21B_X1M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21B_X1M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1 (outB, B0N);
  nor I3 (Y,outA,outB);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21B_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21B_X0P7M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21B_X0P7M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1 (outB, B0N);
  nor I3 (Y,outA,outB);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21B_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21B_X0P5M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21B_X0P5M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1 (outB, B0N);
  nor I3 (Y,outA,outB);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21B_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21_X8M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21_X8M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21_X8M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21_X6M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21_X6M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21_X4M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21_X4M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21_X3M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21_X3M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21_X2M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21_X2M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21_X1P4M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21_X1P4M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21_X1M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21_X1M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21_X0P7M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21_X0P7M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI21_X0P5M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI21_X0P5M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI21_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI211_X4M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI211_X4M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI211_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI211_X3M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI211_X3M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI211_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI211_X2M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI211_X2M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI211_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI211_X1P4M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI211_X1P4M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI211_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI211_X1M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI211_X1M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI211_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI211_X0P7M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI211_X0P7M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI211_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AOI211_X0P5M_A12TL (Y, A0, A1, B0, C0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AOI211_X0P5M_A12TL (Y, A0, A1, B0, C0);
`endif
output Y;
input A0, A1, B0, C0;



  and I0(outA, A0, A1);
  nor I1(Y, B0, C0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(C0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AOI211_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO22_X6M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO22_X6M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  or I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO22_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO22_X4M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO22_X4M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  or I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO22_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO22_X3M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO22_X3M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  or I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO22_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO22_X2M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO22_X2M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  or I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO22_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO22_X1P4M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO22_X1P4M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  or I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO22_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO22_X1M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO22_X1M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  or I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO22_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO22_X0P7M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO22_X0P7M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  or I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO22_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO22_X0P5M_A12TL (Y, A0, A1, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO22_X0P5M_A12TL (Y, A0, A1, B0, B1);
`endif
output Y;
input A0, A1, B0, B1;



  and I0(outA, A0, A1);
  and I1(outB, B0, B1);
  or I2(Y, outA, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO22_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21B_X6M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21B_X6M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1(outB, B0N);
  or I2(Y, outB, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21B_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21B_X4M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21B_X4M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1(outB, B0N);
  or I2(Y, outB, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21B_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21B_X3M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21B_X3M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1(outB, B0N);
  or I2(Y, outB, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21B_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21B_X2M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21B_X2M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1(outB, B0N);
  or I2(Y, outB, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21B_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21B_X1P4M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21B_X1P4M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1(outB, B0N);
  or I2(Y, outB, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21B_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21B_X1M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21B_X1M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1(outB, B0N);
  or I2(Y, outB, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21B_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21B_X0P7M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21B_X0P7M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1(outB, B0N);
  or I2(Y, outB, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21B_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21B_X0P5M_A12TL (Y, A0, A1, B0N, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21B_X0P5M_A12TL (Y, A0, A1, B0N);
`endif
output Y;
input A0, A1, B0N;



  and I0(outA, A0, A1);
  not I1(outB, B0N);
  or I2(Y, outB, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21B_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21_X6M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21_X6M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  or I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21_X4M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21_X4M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  or I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21_X3M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21_X3M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  or I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21_X2M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21_X2M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  or I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21_X1P4M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21_X1P4M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  or I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21_X1M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21_X1M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  or I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21_X0P7M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21_X0P7M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  or I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO21_X0P5M_A12TL (Y, A0, A1, B0, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO21_X0P5M_A12TL (Y, A0, A1, B0);
`endif
output Y;
input A0, A1, B0;



  and I0(outA, A0, A1);
  or I1(Y, B0, outA);
 specify
if (A0==1'b0 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b0 && A1==1'b1)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A0==1'b1 && A1==1'b0)
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(A1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO21_X0P5M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO1B2_X6M_A12TL (Y, A0N, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO1B2_X6M_A12TL (Y, A0N, B0, B1);
`endif
output Y;
input A0N, B0, B1;



  nand I1 (outB, B0, B1);
  nand I2 (Y, A0N, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO1B2_X6M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO1B2_X4M_A12TL (Y, A0N, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO1B2_X4M_A12TL (Y, A0N, B0, B1);
`endif
output Y;
input A0N, B0, B1;



  nand I1 (outB, B0, B1);
  nand I2 (Y, A0N, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO1B2_X4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO1B2_X3M_A12TL (Y, A0N, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO1B2_X3M_A12TL (Y, A0N, B0, B1);
`endif
output Y;
input A0N, B0, B1;



  nand I1 (outB, B0, B1);
  nand I2 (Y, A0N, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO1B2_X3M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO1B2_X2M_A12TL (Y, A0N, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO1B2_X2M_A12TL (Y, A0N, B0, B1);
`endif
output Y;
input A0N, B0, B1;



  nand I1 (outB, B0, B1);
  nand I2 (Y, A0N, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO1B2_X2M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO1B2_X1P4M_A12TL (Y, A0N, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO1B2_X1P4M_A12TL (Y, A0N, B0, B1);
`endif
output Y;
input A0N, B0, B1;



  nand I1 (outB, B0, B1);
  nand I2 (Y, A0N, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO1B2_X1P4M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO1B2_X1M_A12TL (Y, A0N, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO1B2_X1M_A12TL (Y, A0N, B0, B1);
`endif
output Y;
input A0N, B0, B1;



  nand I1 (outB, B0, B1);
  nand I2 (Y, A0N, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO1B2_X1M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO1B2_X0P7M_A12TL (Y, A0N, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO1B2_X0P7M_A12TL (Y, A0N, B0, B1);
`endif
output Y;
input A0N, B0, B1;



  nand I1 (outB, B0, B1);
  nand I2 (Y, A0N, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO1B2_X0P7M_A12TL
`endcelldefine
//$Id: aoi.lang,v 1.6 2008/05/21 09:18:59 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AO1B2_X0P5M_A12TL (Y, A0N, B0, B1, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AO1B2_X0P5M_A12TL (Y, A0N, B0, B1);
`endif
output Y;
input A0N, B0, B1;



  nand I1 (outB, B0, B1);
  nand I2 (Y, A0N, outB);
 specify
if (B0==1'b0 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b0 && B1==1'b1)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B0==1'b1 && B1==1'b0)
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A0N *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B0 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B1 *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AO1B2_X0P5M_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ANTENNA2_A12TL (A, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ANTENNA2_A12TL (A);
`endif
input A;

endmodule // ANTENNA2_A12TL
`endcelldefine

//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND4_X8M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND4_X8M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  and (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND4_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND4_X6M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND4_X6M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  and (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND4_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND4_X4M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND4_X4M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  and (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND4_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND4_X3M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND4_X3M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  and (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND4_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND4_X2M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND4_X2M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  and (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND4_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND4_X1P4M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND4_X1P4M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  and (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND4_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND4_X1M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND4_X1M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  and (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND4_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND4_X0P7M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND4_X0P7M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  and (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND4_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND4_X0P5M_A12TL (Y, A, B, C, D, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND4_X0P5M_A12TL (Y, A, B, C, D);
`endif
output Y;
input A, B, C, D;

  and (Y, A, B, C, D);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(D *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND4_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X8M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X8M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X6M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X6M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X3M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X3M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X2M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X2M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X1P4M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X1P4M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X1M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X1M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X11M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X11M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X11M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X0P7M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X0P7M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND3_X0P5M_A12TL (Y, A, B, C, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND3_X0P5M_A12TL (Y, A, B, C);
`endif
output Y;
input A, B, C;

  and (Y, A, B, C);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(C *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND3_X0P5M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X8M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X8M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X8M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X6M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X6M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X6M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X3M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X3M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X3M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X2M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X2M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X2M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X1P4M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X1P4M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X1P4M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X1M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X1M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X1M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X11M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X11M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X11M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X0P7M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X0P7M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X0P7M_A12TL
`endcelldefine
//$Id: comb.lang,v 1.4 2008/05/15 10:08:03 shuaga01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module AND2_X0P5M_A12TL (Y, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module AND2_X0P5M_A12TL (Y, A, B);
`endif
output Y;
input A, B;

  and (Y, A, B);
 specify
(A *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> Y) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // AND2_X0P5M_A12TL
`endcelldefine
//$Id: add.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ADDH_X2M_A12TL ( CO, S, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ADDH_X2M_A12TL ( CO, S, A, B);
`endif
output S, CO;
input A, B;
  xor I0(S, A, B);
  and I1(CO, A, B);
 specify
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // ADDH_X2M_A12TL
`endcelldefine
//$Id: add.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ADDH_X1P4M_A12TL ( CO, S, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ADDH_X1P4M_A12TL ( CO, S, A, B);
`endif
output S, CO;
input A, B;
  xor I0(S, A, B);
  and I1(CO, A, B);
 specify
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // ADDH_X1P4M_A12TL
`endcelldefine
//$Id: add.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ADDH_X1M_A12TL ( CO, S, A, B, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ADDH_X1M_A12TL ( CO, S, A, B);
`endif
output S, CO;
input A, B;
  xor I0(S, A, B);
  and I1(CO, A, B);
 specify
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(posedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
(negedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // ADDH_X1M_A12TL
`endcelldefine
//$Id: add.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ADDF_X2M_A12TL ( CO, S, A, B, CI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ADDF_X2M_A12TL ( CO, S, A, B, CI);
`endif
output S, CO;
input A, B, CI;
  xor I0(S, A, B, CI);
  and I1(a_and_b, A, B);
  and I2(a_and_ci, A, CI);
  and I3(b_and_ci, B, CI);
  or  I4(CO, a_and_b, a_and_ci, b_and_ci);
 specify
if (B==1'b0 && CI==1'b1)
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && CI==1'b0)
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && CI==1'b1)
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && CI==1'b0)
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(CI *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(CI *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CI *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && CI==1'b1)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && CI==1'b0)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && CI==1'b0)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && CI==1'b1)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && CI==1'b1)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && CI==1'b0)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && CI==1'b0)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && CI==1'b1)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CI *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CI *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // ADDF_X2M_A12TL
`endcelldefine
//$Id: add.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ADDF_X1P4M_A12TL ( CO, S, A, B, CI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ADDF_X1P4M_A12TL ( CO, S, A, B, CI);
`endif
output S, CO;
input A, B, CI;
  xor I0(S, A, B, CI);
  and I1(a_and_b, A, B);
  and I2(a_and_ci, A, CI);
  and I3(b_and_ci, B, CI);
  or  I4(CO, a_and_b, a_and_ci, b_and_ci);
 specify
if (B==1'b0 && CI==1'b1)
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && CI==1'b0)
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && CI==1'b1)
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && CI==1'b0)
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(CI *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(CI *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CI *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && CI==1'b1)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && CI==1'b0)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && CI==1'b0)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && CI==1'b1)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && CI==1'b1)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && CI==1'b0)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && CI==1'b0)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && CI==1'b1)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CI *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CI *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // ADDF_X1P4M_A12TL
`endcelldefine
//$Id: add.lang,v 1.3 2008/04/02 10:19:00 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module ADDF_X1M_A12TL ( CO, S, A, B, CI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module ADDF_X1M_A12TL ( CO, S, A, B, CI);
`endif
output S, CO;
input A, B, CI;
  xor I0(S, A, B, CI);
  and I1(a_and_b, A, B);
  and I2(a_and_ci, A, CI);
  and I3(b_and_ci, B, CI);
  or  I4(CO, a_and_b, a_and_ci, b_and_ci);
 specify
if (B==1'b0 && CI==1'b1)
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && CI==1'b0)
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && CI==1'b1)
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && CI==1'b0)
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(CI *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(CI *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(A *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(B *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(CI *> CO) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && CI==1'b1)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && CI==1'b0)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b0 && CI==1'b0)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && CI==1'b1)
(A *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && CI==1'b1)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && CI==1'b0)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && CI==1'b0)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && CI==1'b1)
(B *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1)
(CI *> S) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge A *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge B *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CI *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(negedge CI *> (S : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // ADDF_X1M_A12TL
`endcelldefine
//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2SDFFQN_X3M_A12TL (QN, A, B, CK, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2SDFFQN_X3M_A12TL (QN, A, B, CK, SE, SI);
`endif
output QN;
input A, B, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  and     I0 (n2, A, B);
  udp_mux I2 (n1, n2, SI, SE);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  not     I3 (QN, n0);
wire ENABLE_B_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_B_AND_NOT_SE_AND_SI ;
wire ENABLE_A_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_A_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SI ;
wire ENABLE_NOT_A_AND_B_AND_SI ;
wire ENABLE_A_AND_NOT_B_AND_SI ;
wire ENABLE_A_AND_B_AND_NOT_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SE ;
wire ENABLE_NOT_A_AND_B_AND_SE ;
wire ENABLE_A_AND_NOT_B_AND_SE ;
wire ENABLE_A_AND_B_AND_SE ;
assign ENABLE_B_AND_NOT_SE_AND_NOT_SI  = (B&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_B_AND_NOT_SE_AND_SI  = (B&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_NOT_SI  = (A&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_SI  = (A&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SI  = (!A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SI  = (!A&B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SI  = (A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_NOT_SI  = (A&B&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SE  = (!A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SE  = (!A&B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SE  = (A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_SE  = (A&B&SE) ? 1'b1:1'b0;
 specify
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b0 && SI==1'b1 || A==1'b0 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // A2SDFFQN_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2SDFFQN_X2M_A12TL (QN, A, B, CK, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2SDFFQN_X2M_A12TL (QN, A, B, CK, SE, SI);
`endif
output QN;
input A, B, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  and     I0 (n2, A, B);
  udp_mux I2 (n1, n2, SI, SE);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  not     I3 (QN, n0);
wire ENABLE_B_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_B_AND_NOT_SE_AND_SI ;
wire ENABLE_A_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_A_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SI ;
wire ENABLE_NOT_A_AND_B_AND_SI ;
wire ENABLE_A_AND_NOT_B_AND_SI ;
wire ENABLE_A_AND_B_AND_NOT_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SE ;
wire ENABLE_NOT_A_AND_B_AND_SE ;
wire ENABLE_A_AND_NOT_B_AND_SE ;
wire ENABLE_A_AND_B_AND_SE ;
assign ENABLE_B_AND_NOT_SE_AND_NOT_SI  = (B&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_B_AND_NOT_SE_AND_SI  = (B&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_NOT_SI  = (A&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_SI  = (A&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SI  = (!A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SI  = (!A&B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SI  = (A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_NOT_SI  = (A&B&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SE  = (!A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SE  = (!A&B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SE  = (A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_SE  = (A&B&SE) ? 1'b1:1'b0;
 specify
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b0 && SI==1'b1 || A==1'b0 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // A2SDFFQN_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2SDFFQN_X1M_A12TL (QN, A, B, CK, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2SDFFQN_X1M_A12TL (QN, A, B, CK, SE, SI);
`endif
output QN;
input A, B, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  and     I0 (n2, A, B);
  udp_mux I2 (n1, n2, SI, SE);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  not     I3 (QN, n0);
wire ENABLE_B_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_B_AND_NOT_SE_AND_SI ;
wire ENABLE_A_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_A_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SI ;
wire ENABLE_NOT_A_AND_B_AND_SI ;
wire ENABLE_A_AND_NOT_B_AND_SI ;
wire ENABLE_A_AND_B_AND_NOT_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SE ;
wire ENABLE_NOT_A_AND_B_AND_SE ;
wire ENABLE_A_AND_NOT_B_AND_SE ;
wire ENABLE_A_AND_B_AND_SE ;
assign ENABLE_B_AND_NOT_SE_AND_NOT_SI  = (B&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_B_AND_NOT_SE_AND_SI  = (B&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_NOT_SI  = (A&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_SI  = (A&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SI  = (!A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SI  = (!A&B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SI  = (A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_NOT_SI  = (A&B&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SE  = (!A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SE  = (!A&B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SE  = (A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_SE  = (A&B&SE) ? 1'b1:1'b0;
 specify
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b0 && SI==1'b1 || A==1'b0 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // A2SDFFQN_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2SDFFQN_X0P5M_A12TL (QN, A, B, CK, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2SDFFQN_X0P5M_A12TL (QN, A, B, CK, SE, SI);
`endif
output QN;
input A, B, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  and     I0 (n2, A, B);
  udp_mux I2 (n1, n2, SI, SE);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  not     I3 (QN, n0);
wire ENABLE_B_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_B_AND_NOT_SE_AND_SI ;
wire ENABLE_A_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_A_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SI ;
wire ENABLE_NOT_A_AND_B_AND_SI ;
wire ENABLE_A_AND_NOT_B_AND_SI ;
wire ENABLE_A_AND_B_AND_NOT_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SE ;
wire ENABLE_NOT_A_AND_B_AND_SE ;
wire ENABLE_A_AND_NOT_B_AND_SE ;
wire ENABLE_A_AND_B_AND_SE ;
assign ENABLE_B_AND_NOT_SE_AND_NOT_SI  = (B&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_B_AND_NOT_SE_AND_SI  = (B&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_NOT_SI  = (A&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_SI  = (A&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SI  = (!A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SI  = (!A&B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SI  = (A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_NOT_SI  = (A&B&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SE  = (!A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SE  = (!A&B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SE  = (A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_SE  = (A&B&SE) ? 1'b1:1'b0;
 specify
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SI==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b0 && SI==1'b1 || A==1'b0 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // A2SDFFQN_X0P5M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2SDFFQ_X4M_A12TL (Q, A, B, CK, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2SDFFQ_X4M_A12TL (Q, A, B, CK, SE, SI);
`endif
output Q;
input A, B, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  and     I0 (n2, A, B);
  udp_mux I2 (n1, n2, SI, SE);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I3 (Q, n0);
wire ENABLE_B_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_B_AND_NOT_SE_AND_SI ;
wire ENABLE_A_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_A_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SI ;
wire ENABLE_NOT_A_AND_B_AND_SI ;
wire ENABLE_A_AND_NOT_B_AND_SI ;
wire ENABLE_A_AND_B_AND_NOT_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SE ;
wire ENABLE_NOT_A_AND_B_AND_SE ;
wire ENABLE_A_AND_NOT_B_AND_SE ;
wire ENABLE_A_AND_B_AND_SE ;
assign ENABLE_B_AND_NOT_SE_AND_NOT_SI  = (B&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_B_AND_NOT_SE_AND_SI  = (B&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_NOT_SI  = (A&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_SI  = (A&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SI  = (!A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SI  = (!A&B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SI  = (A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_NOT_SI  = (A&B&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SE  = (!A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SE  = (!A&B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SE  = (A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_SE  = (A&B&SE) ? 1'b1:1'b0;
 specify
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b0 && SI==1'b1 || A==1'b0 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // A2SDFFQ_X4M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2SDFFQ_X3M_A12TL (Q, A, B, CK, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2SDFFQ_X3M_A12TL (Q, A, B, CK, SE, SI);
`endif
output Q;
input A, B, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  and     I0 (n2, A, B);
  udp_mux I2 (n1, n2, SI, SE);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I3 (Q, n0);
wire ENABLE_B_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_B_AND_NOT_SE_AND_SI ;
wire ENABLE_A_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_A_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SI ;
wire ENABLE_NOT_A_AND_B_AND_SI ;
wire ENABLE_A_AND_NOT_B_AND_SI ;
wire ENABLE_A_AND_B_AND_NOT_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SE ;
wire ENABLE_NOT_A_AND_B_AND_SE ;
wire ENABLE_A_AND_NOT_B_AND_SE ;
wire ENABLE_A_AND_B_AND_SE ;
assign ENABLE_B_AND_NOT_SE_AND_NOT_SI  = (B&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_B_AND_NOT_SE_AND_SI  = (B&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_NOT_SI  = (A&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_SI  = (A&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SI  = (!A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SI  = (!A&B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SI  = (A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_NOT_SI  = (A&B&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SE  = (!A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SE  = (!A&B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SE  = (A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_SE  = (A&B&SE) ? 1'b1:1'b0;
 specify
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b0 && SI==1'b1 || A==1'b0 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // A2SDFFQ_X3M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2SDFFQ_X2M_A12TL (Q, A, B, CK, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2SDFFQ_X2M_A12TL (Q, A, B, CK, SE, SI);
`endif
output Q;
input A, B, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  and     I0 (n2, A, B);
  udp_mux I2 (n1, n2, SI, SE);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I3 (Q, n0);
wire ENABLE_B_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_B_AND_NOT_SE_AND_SI ;
wire ENABLE_A_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_A_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SI ;
wire ENABLE_NOT_A_AND_B_AND_SI ;
wire ENABLE_A_AND_NOT_B_AND_SI ;
wire ENABLE_A_AND_B_AND_NOT_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SE ;
wire ENABLE_NOT_A_AND_B_AND_SE ;
wire ENABLE_A_AND_NOT_B_AND_SE ;
wire ENABLE_A_AND_B_AND_SE ;
assign ENABLE_B_AND_NOT_SE_AND_NOT_SI  = (B&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_B_AND_NOT_SE_AND_SI  = (B&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_NOT_SI  = (A&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_SI  = (A&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SI  = (!A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SI  = (!A&B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SI  = (A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_NOT_SI  = (A&B&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SE  = (!A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SE  = (!A&B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SE  = (A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_SE  = (A&B&SE) ? 1'b1:1'b0;
 specify
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b0 && SI==1'b1 || A==1'b0 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // A2SDFFQ_X2M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2SDFFQ_X1M_A12TL (Q, A, B, CK, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2SDFFQ_X1M_A12TL (Q, A, B, CK, SE, SI);
`endif
output Q;
input A, B, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  and     I0 (n2, A, B);
  udp_mux I2 (n1, n2, SI, SE);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I3 (Q, n0);
wire ENABLE_B_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_B_AND_NOT_SE_AND_SI ;
wire ENABLE_A_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_A_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SI ;
wire ENABLE_NOT_A_AND_B_AND_SI ;
wire ENABLE_A_AND_NOT_B_AND_SI ;
wire ENABLE_A_AND_B_AND_NOT_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SE ;
wire ENABLE_NOT_A_AND_B_AND_SE ;
wire ENABLE_A_AND_NOT_B_AND_SE ;
wire ENABLE_A_AND_B_AND_SE ;
assign ENABLE_B_AND_NOT_SE_AND_NOT_SI  = (B&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_B_AND_NOT_SE_AND_SI  = (B&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_NOT_SI  = (A&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_SI  = (A&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SI  = (!A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SI  = (!A&B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SI  = (A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_NOT_SI  = (A&B&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SE  = (!A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SE  = (!A&B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SE  = (A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_SE  = (A&B&SE) ? 1'b1:1'b0;
 specify
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b0 && SI==1'b1 || A==1'b0 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // A2SDFFQ_X1M_A12TL
`endcelldefine
	

//$Id: sdff.lang,v 1.4 2008/04/02 10:19:01 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2SDFFQ_X0P5M_A12TL (Q, A, B, CK, SE, SI, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2SDFFQ_X0P5M_A12TL (Q, A, B, CK, SE, SI);
`endif
output Q;
input A, B, SI, SE, CK;
reg NOTIFIER;
supply1 xRN, xSN;
supply1 dRN, dSN;
  buf     IC (clk, CK);
  and     I0 (n2, A, B);
  udp_mux I2 (n1, n2, SI, SE);
  udp_dff I1 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I3 (Q, n0);
wire ENABLE_B_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_B_AND_NOT_SE_AND_SI ;
wire ENABLE_A_AND_NOT_SE_AND_NOT_SI ;
wire ENABLE_A_AND_NOT_SE_AND_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SI ;
wire ENABLE_NOT_A_AND_B_AND_SI ;
wire ENABLE_A_AND_NOT_B_AND_SI ;
wire ENABLE_A_AND_B_AND_NOT_SI ;
wire ENABLE_NOT_A_AND_NOT_B_AND_SE ;
wire ENABLE_NOT_A_AND_B_AND_SE ;
wire ENABLE_A_AND_NOT_B_AND_SE ;
wire ENABLE_A_AND_B_AND_SE ;
assign ENABLE_B_AND_NOT_SE_AND_NOT_SI  = (B&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_B_AND_NOT_SE_AND_SI  = (B&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_NOT_SI  = (A&!SE&!SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_SE_AND_SI  = (A&!SE&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SI  = (!A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SI  = (!A&B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SI  = (A&!B&SI) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_NOT_SI  = (A&B&!SI) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_NOT_B_AND_SE  = (!A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_NOT_A_AND_B_AND_SE  = (!A&B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_NOT_B_AND_SE  = (A&!B&SE) ? 1'b1:1'b0;
assign ENABLE_A_AND_B_AND_SE  = (A&B&SE) ? 1'b1:1'b0;
 specify
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_B_AND_NOT_SE_AND_SI == 1'b1), posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_NOT_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_SE_AND_SI == 1'b1), posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b0 && B==1'b1 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SE==1'b1 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0 && SI==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b0 && SI==1'b1 || A==1'b0 && B==1'b0 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b1 && SE==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1 && SE==1'b0 && SI==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), negedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_NOT_SI == 1'b1), posedge SE, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_NOT_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_NOT_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), negedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK &&& (ENABLE_A_AND_B_AND_SE == 1'b1), posedge SI, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
endspecify
endmodule // A2SDFFQ_X0P5M_A12TL
`endcelldefine
	

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2DFFQN_X3M_A12TL (QN, A, B, CK, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2DFFQN_X3M_A12TL (QN, A, B, CK);
`endif
output QN;
input  A, B, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  and     IA (n1, A, B);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
 specify
$setuphold(posedge CK, negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // A2DFFQN_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2DFFQN_X2M_A12TL (QN, A, B, CK, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2DFFQN_X2M_A12TL (QN, A, B, CK);
`endif
output QN;
input  A, B, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  and     IA (n1, A, B);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
 specify
$setuphold(posedge CK, negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // A2DFFQN_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2DFFQN_X1M_A12TL (QN, A, B, CK, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2DFFQN_X1M_A12TL (QN, A, B, CK);
`endif
output QN;
input  A, B, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  and     IA (n1, A, B);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
 specify
$setuphold(posedge CK, negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // A2DFFQN_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2DFFQN_X0P5M_A12TL (QN, A, B, CK, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2DFFQN_X0P5M_A12TL (QN, A, B, CK);
`endif
output QN;
input  A, B, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  and     IA (n1, A, B);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  not     I2 (QN, n0);
 specify
$setuphold(posedge CK, negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (QN : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // A2DFFQN_X0P5M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2DFFQ_X4M_A12TL (Q, A, B, CK, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2DFFQ_X4M_A12TL (Q, A, B, CK);
`endif
output Q;
input  A, B, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  and     IA (n1, A, B);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$setuphold(posedge CK, negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // A2DFFQ_X4M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2DFFQ_X3M_A12TL (Q, A, B, CK, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2DFFQ_X3M_A12TL (Q, A, B, CK);
`endif
output Q;
input  A, B, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  and     IA (n1, A, B);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$setuphold(posedge CK, negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // A2DFFQ_X3M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2DFFQ_X2M_A12TL (Q, A, B, CK, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2DFFQ_X2M_A12TL (Q, A, B, CK);
`endif
output Q;
input  A, B, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  and     IA (n1, A, B);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$setuphold(posedge CK, negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // A2DFFQ_X2M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2DFFQ_X1M_A12TL (Q, A, B, CK, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2DFFQ_X1M_A12TL (Q, A, B, CK);
`endif
output Q;
input  A, B, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  and     IA (n1, A, B);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$setuphold(posedge CK, negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // A2DFFQ_X1M_A12TL
`endcelldefine

//$Id: dff.lang,v 1.7 2008/04/08 14:53:24 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module A2DFFQ_X0P5M_A12TL (Q, A, B, CK, VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module A2DFFQ_X0P5M_A12TL (Q, A, B, CK);
`endif
output Q;
input  A, B, CK;
reg NOTIFIER;
supply1 xSN,xRN;
  buf     IC (clk, CK);
  and     IA (n1, A, B);
  udp_dff I0 (n0, n1, clk, xRN, xSN, NOTIFIER);
  buf     I1 (Q, n0);
 specify
$setuphold(posedge CK, negedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge A, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, negedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$setuphold(posedge CK, posedge B, `ARM_SETUP_TIME, `ARM_HOLD_TIME, NOTIFIER);
$width(posedge CK,`ARM_WIDTH,0,NOTIFIER);
$width(negedge CK,`ARM_WIDTH,0,NOTIFIER);
if (A==1'b0 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (A==1'b1 && B==1'b0)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
if (B==1'b1)
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
ifnone
(posedge CK *> (Q : 1'bx)) = (`ARM_PROP_DELAY,`ARM_PROP_DELAY);
endspecify
endmodule // A2DFFQ_X0P5M_A12TL
`endcelldefine

//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//


`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAP128_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAP128_A12TL;
`endif

endmodule // FILLDGCAP128_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAP12_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAP12_A12TL;
`endif

endmodule // FILLDGCAP12_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAP16_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAP16_A12TL;
`endif

endmodule // FILLDGCAP16_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAP32_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAP32_A12TL;
`endif

endmodule // FILLDGCAP32_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAP64_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAP64_A12TL;
`endif

endmodule // FILLDGCAP64_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAPTIE128_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAPTIE128_A12TL;
`endif

endmodule // FILLDGCAPTIE128_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAPTIE12_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAPTIE12_A12TL;
`endif

endmodule // FILLDGCAPTIE12_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAPTIE16_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAPTIE16_A12TL;
`endif

endmodule // FILLDGCAPTIE16_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAPTIE32_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAPTIE32_A12TL;
`endif

endmodule // FILLDGCAPTIE32_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLDGCAPTIE64_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLDGCAPTIE64_A12TL;
`endif

endmodule // FILLDGCAPTIE64_A12TL
`endcelldefine

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAPTIE8_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAPTIE8_A12TL;
`endif

endmodule // FILLCAPTIE8_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAPTIE64_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAPTIE64_A12TL;
`endif

endmodule // FILLCAPTIE64_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAPTIE6_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAPTIE6_A12TL;
`endif

endmodule // FILLCAPTIE6_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAPTIE32_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAPTIE32_A12TL;
`endif

endmodule // FILLCAPTIE32_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAPTIE16_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAPTIE16_A12TL;
`endif

endmodule // FILLCAPTIE16_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAPTIE128_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAPTIE128_A12TL;
`endif

endmodule // FILLCAPTIE128_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAP8_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAP8_A12TL;
`endif

endmodule // FILLCAP8_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAP64_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAP64_A12TL;
`endif

endmodule // FILLCAP64_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAP4_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAP4_A12TL;
`endif

endmodule // FILLCAP4_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAP32_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAP32_A12TL;
`endif

endmodule // FILLCAP32_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAP3_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAP3_A12TL;
`endif

endmodule // FILLCAP3_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAP16_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAP16_A12TL;
`endif

endmodule // FILLCAP16_A12TL
`endcelldefine
//$Id: misc.lang,v 1.2 2008/01/23 13:40:34 aruvas01 Exp $
//CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
//
//Copyright (c) 1993-2007  ARM Physical IP, Inc.  All  Rights Reserved.
//
//Use of this Software is subject to the terms and conditions  of the
//applicable license agreement with ARM Physical IP, Inc.  In addition,
//this Software is protected by patents, copyright law and international
//treaties.
//
//The copyright notice(s) in this Software does not indicate actual or
//intended publication of this Software.
//

`timescale 1ns/1ps
`celldefine
`ifdef POWER_PINS
module FILLCAP128_A12TL(VDD, VSS);
inout VDD;
inout VSS;
supply1 VDD;
supply0 VSS;
`else
module FILLCAP128_A12TL;
`endif

endmodule // FILLCAP128_A12TL
`endcelldefine

`ifdef ARM_udp_edff_READ

`else

primitive udp_edff (out, in, clk, clr_, set_, en, NOTIFIER);
   output out;  
   input  in, clk, clr_, set_, en, NOTIFIER;
   reg    out;

   table

// in  clk  clr_   set_  en  NOT  : Qt : Qt+1
//
   0   r    ?      1     1   ?    : ?  :  0  ; // clock in 0
   1   r    1      ?     1   ?    : ?  :  1  ; // clock in 1
   ?   *    ?      ?     0   ?    : ?  :  -  ; // no changes, not enabled
   *   ?    ?      ?     0   ?    : ?  :  -  ; // no changes, not enabled
   1   *    1      ?     ?   ?    : 1  :  1  ; // reduce pessimism
   0   *    ?      1     ?   ?    : 0  :  0  ; // reduce pessimism
   ?   f    ?      ?     ?   ?    : ?  :  -  ; // no changes on negedge clk
   *   b    ?      ?     ?   ?    : ?  :  -  ; // no changes when in switches
   1   x    1      ?     ?   ?    : 1  :  1  ; // no changes when in switches
   0   x    ?      1     ?   ?    : 0  :  0  ; // no changes when in switches
   ?   b    ?      ?     *   ?    : ?  :  -  ; // no changes when en switches
   ?   x    1      1     0   ?    : ?  :  -  ; // no changes when en is disabled
   ?   ?    ?      0     ?   ?    : ?  :  1  ; // set output
   ?   b    1      *     ?   ?    : 1  :  1  ; // cover all transistions on set_
   ?   ?    1      *     0   ?    : 1  :  1  ; // cover all transistions on set_
   ?   ?    0      1     ?   ?    : ?  :  0  ; // reset output
   ?   b    *      1     ?   ?    : 0  :  0  ; // cover all transistions on clr_
   ?   ?    *      1     0   ?    : 0  :  0  ; // cover all transistions on clr_
   ?   ?    ?      ?     ?   *    : ?  :  x  ; // any notifier changed

   endtable
endprimitive // udp_edff
`endif

`ifdef ARM_udp_mux2_READ

`else

primitive udp_mux2 (out, in0, in1, sel);
   output out;  
   input  in0, in1, sel;

   table

// in0 in1  sel :  out
//
   1  ?   0  :  1 ;
   0  ?   0  :  0 ;
   ?  1   1  :  1 ;
   ?  0   1  :  0 ;
   0  0   x  :  0 ;
   1  1   x  :  1 ;

   endtable
endprimitive // udp_mux2
`endif

`ifdef ARM_udp_mux_READ

`else

primitive udp_mux (out, in, s_in, s_sel);
   output out;  
   input  in, s_in, s_sel;

   table

// in  s_in  s_sel :  out
//
   1  ?   0  :  1 ;
   0  ?   0  :  0 ;
   ?  1   1  :  1 ;
   ?  0   1  :  0 ;
   0  0   x  :  0 ;
   1  1   x  :  1 ;

   endtable
endprimitive // udp_mux
`endif

`ifdef ARM_udp_tlatrf_READ

`else

primitive udp_tlatrf (out, in, ww, wwn, NOTIFIER);
   output out;  
   input  in, ww, wwn, NOTIFIER;
   reg    out;

   table

// in  ww    wwn  NOT  : Qt : Qt+1
//	     
   1   ?     0    ?    : ?  :  1  ; // 
   1   1     ?    ?    : ?  :  1  ; // 
   0   ?     0    ?    : ?  :  0  ; // 
   0   1     ?    ?    : ?  :  0  ; // 
   1   *     ?    ?    : 1  :  1  ; // reduce pessimism
   1   ?     *    ?    : 1  :  1  ; // reduce pessimism
   0   *     ?    ?    : 0  :  0  ; // reduce pessimism
   0   ?     *    ?    : 0  :  0  ; // reduce pessimism
   *   0     1    ?    : ?  :  -  ; // no changes when in switches
   ?   ?     ?    *    : ?  :  x  ; // any notifier changed

   endtable
endprimitive // udp_tlatrf

`endif

`ifdef ARM_udp_plat_READ

`else
// This udp simulates the special latch behaviour of
// posticg cells.
primitive udp_plat (out, ovrd, clock, ena, NOTIFIER);
   output out;  
   input  ovrd, clock, ena, NOTIFIER;
   reg    out;

   table

// ovrd clock ena NOTIFIER : Qt : Qt+1
//
   1    ?    ?    ?   : ?  :  1  ;
   0    0    0    ?   : ?  :  0  ;
   0    0    1    ?   : ?  :  1  ;
   0    1    ?    ?   : ?  :  -  ;
   ?    1    *    ?   : ?  :  -  ; // no changes when in switches
   ?    ?    ?    *   : ?  :  x  ; // any notifier changed

   endtable
endprimitive // udp_plat
`endif

`ifdef ARM_udp_dff_READ

`else

primitive udp_dff (out, in, clk, clr_, set_, NOTIFIER);
   output out;  
   input  in, clk, clr_, set_, NOTIFIER;
   reg    out;

   table

// in  clk  clr_   set_  NOT  : Qt : Qt+1
//
   0  r   ?   1   ?   : ?  :  0  ; // clock in 0
   1  r   1   ?   ?   : ?  :  1  ; // clock in 1
   1  *   1   ?   ?   : 1  :  1  ; // reduce pessimism
   0  *   ?   1   ?   : 0  :  0  ; // reduce pessimism
   ?  f   ?   ?   ?   : ?  :  -  ; // no changes on negedge clk
   *  b   ?   ?   ?   : ?  :  -  ; // no changes when in switches
   ?  ?   ?   0   ?   : ?  :  1  ; // set output
   ?  b   1   *   ?   : 1  :  1  ; // cover all transistions on set_
   1  x   1   *   ?   : 1  :  1  ; // cover all transistions on set_
   ?  ?   0   1   ?   : ?  :  0  ; // reset output
   ?  b   *   1   ?   : 0  :  0  ; // cover all transistions on clr_
   0  x   *   1   ?   : 0  :  0  ; // cover all transistions on clr_
   ?  ?   ?   ?   *   : ?  :  x  ; // any notifier changed

   endtable
endprimitive // udp_dff
`endif

`ifdef ARM_udp_tlatrf2_READ

`else

primitive udp_tlatrf2 (out, in1, w1w, in2, w2w, NOTIFIER);
   output out;  
   input  in1, w1w, NOTIFIER;
   input  in2, w2w;
   reg    out;

   table

// in1 ww1 in2 ww2  NOT  : Qt : Qt+1
//	     
   ?   ?    ?   ?    *    : ?  :  x  ; //
   1   1    ?   0    ?    : ?  :  1  ; //
   1   *    ?   0    ?    : 1  :  1  ; //
   0   1    ?   0    ?    : ?  :  0  ; //
   0   *    ?   0    ?    : 0  :  0  ; //
   ?   0    1   1    ?    : ?  :  1  ; //
   ?   0    1   *    ?    : 1  :  1  ; //
   ?   0    0   1    ?    : ?  :  0  ; //
   ?   0    0   *    ?    : 0  :  0  ; //
   *   0    ?   0    ?    : ?  :  -  ; //
   ?   0    *   0    ?    : ?  :  -  ; //
   1   *    1   1    ?    : ?  :  1  ; //
   1   1    1   *    ?    : ?  :  1  ; //
   0   *    0   1    ?    : ?  :  0  ; //
   0   1    0   *    ?    : ?  :  0  ; //
   0   1    0   1    ?    : ?  :  0  ; //
   1   1    1   1    ?    : ?  :  1  ; //



   endtable
endprimitive // udp_tlatrf2

`endif

`ifdef ARM_udp_sedff_READ

`else

primitive udp_sedff (out, in, clk, clr_, si, se, en, NOTIFIER);
   output out;  
   input  in, clk, clr_, si, se,  en, NOTIFIER;
   reg    out;

   table
   // in  clk  clr_  si  se  en  NOT : Qt : Qt+1
      ?    ?    ?     ?   ?   ?   *  : ?  :  x; // any notifier changed
      ?    ?    0     ?   ?   ?   ?  : ?  :  0;     
      ?    r    ?     0   1   ?   ?  : ?  :  0;     
      ?    r    1     1   1   ?   ?  : ?  :  1;
      ?    b    1     ?   *   ?   ?  : ?  :  -; // no changes when se switches
      ?    b    1     *   ?   ?   ?  : ?  :  -; // no changes when si switches
      *    b    1     ?   ?   ?   ?  : ?  :  -; // no changes when in switches
      *    ?    ?     ?   0   0   ?  : 0  :  0; // no changes when in switches
      ?    ?    ?     *   0   0   ?  : 0  :  0; // no changes when in switches
      ?    b    1     ?   ?   *   ?  : ?  :  -; // no changes when en switches
      ?    b    *     ?   ?   ?   ?  : 0  :  0; // no changes when en switches
      ?    ?    *     ?   0   0   ?  : 0  :  0; // no changes when en switches
      ?    b    ?     ?   ?   *   ?  : 0  :  0; // no changes when en switches
      ?    b    ?     ?   *   ?   ?  : 0  :  0; // no changes when en switches
      ?    b    ?     *   ?   ?   ?  : 0  :  0; // no changes when en switches
      *    b    ?     ?   ?   ?   ?  : 0  :  0; // no changes when en switches
      ?  (10)   ?     ?   ?   ?   ?  : ?  :  -;  // no changes on falling clk edge
      ?    *    1     1   1   ?   ?  : 1  :  1;
      ?    x    1     1   1   ?   ?  : 1  :  1;
      ?    *    1     1   ?   0   ?  : 1  :  1;
      ?    x    1     1   ?   0   ?  : 1  :  1;
      ?    *    ?     0   1   ?   ?  : 0  :  0;
      ?    x    ?     0   1   ?   ?  : 0  :  0;
      ?    *    ?     0   ?   0   ?  : 0  :  0;
      ?    x    ?     0   ?   0   ?  : 0  :  0;
      0    r    ?     0   ?   1   ?  : ?  :  0 ; 
      0    *    ?     0   ?   ?   ?  : 0  :  0 ; 
      0    x    ?     0   ?   ?   ?  : 0  :  0 ; 
      1    r    1     1   ?   1   ?  : ?  :  1 ; 
      1    *    1     1   ?   ?   ?  : 1  :  1 ; 
      1    x    1     1   ?   ?   ?  : 1  :  1 ; 
      ?  (x0)   ?     ?   ?   ?   ?  : ?  :  -;  // no changes on falling clk edge
      1    r    1     ?   0   1   ?  : ?  :  1;
      0    r    ?     ?   0   1   ?  : ?  :  0;
      ?    *    ?     ?   0   0   ?  : ?  :  -;
      ?    x    1     ?   0   0   ?  : ?  :  -;
      1    x    1     ?   0   ?   ?  : 1  :  1; // no changes when in switches
      0    x    ?     ?   0   ?   ?  : 0  :  0; // no changes when in switches
      1    x    ?     ?   0   0   ?  : 0  :  0; // no changes when in switches
      1    *    1     ?   0   ?   ?  : 1  :  1; // reduce pessimism
      0    *    ?     ?   0   ?   ?  : 0  :  0; // reduce pessimism

   endtable
endprimitive  /* udp_sedff */
   
`endif

`ifdef ARM_udp_mux4_READ

`else

primitive udp_mux4 (out, in0, in1, in2, in3, sel_0, sel_1);
   output out;  
   input  in0, in1, in2, in3, sel_0, sel_1;

   table

// in0 in1 in2 in3 sel_0 sel_1 :  out
//
   0  ?  ?  ?  0  0  :  0;
   1  ?  ?  ?  0  0  :  1;
   ?  0  ?  ?  1  0  :  0;
   ?  1  ?  ?  1  0  :  1;
   ?  ?  0  ?  0  1  :  0;
   ?  ?  1  ?  0  1  :  1;
   ?  ?  ?  0  1  1  :  0;
   ?  ?  ?  1  1  1  :  1;
   0  0  ?  ?  x  0  :  0;
   1  1  ?  ?  x  0  :  1;
   ?  ?  0  0  x  1  :  0;
   ?  ?  1  1  x  1  :  1;
   0  ?  0  ?  0  x  :  0;
   1  ?  1  ?  0  x  :  1;
   ?  0  ?  0  1  x  :  0;
   ?  1  ?  1  1  x  :  1;
   1  1  1  1  x  x  :  1;
   0  0  0  0  x  x  :  0;

   endtable
endprimitive // udp_mux4
`endif

`ifdef ARM_udp_outrf_READ

`else

primitive udp_outrf (out, in, rwn, rw);
   output out;  
   input  in, rwn, rw;

   table

// in  rwn   rw   : out;
//	     	  
   0   0     ?    : 1  ; // 
   1   ?     1    : 1  ; // 
   ?   1     0    : 0  ; // 
   1   ?     0    : 0  ; // 
   0   1     ?    : 0  ; // 

   endtable
endprimitive // udp_outrf

`endif

`ifdef ARM_udp_tlat_READ

`else

primitive udp_tlat (out, in, hold, clr_, set_, NOTIFIER);
   output out;  
   input  in, hold, clr_, set_, NOTIFIER;
   reg    out;

   table

// in  hold  clr_   set_  NOT  : Qt : Qt+1
//
   1  0   1   ?   ?   : ?  :  1  ; // 
   0  0   ?   1   ?   : ?  :  0  ; // 
   1  *   1   ?   ?   : 1  :  1  ; // reduce pessimism
   0  *   ?   1   ?   : 0  :  0  ; // reduce pessimism
   *  1   ?   ?   ?   : ?  :  -  ; // no changes when in switches
   ?  ?   ?   0   ?   : ?  :  1  ; // set output
   ?  1   1   *   ?   : 1  :  1  ; // cover all transistions on set_
   1  ?   1   *   ?   : 1  :  1  ; // cover all transistions on set_
   ?  ?   0   1   ?   : ?  :  0  ; // reset output
   ?  1   *   1   ?   : 0  :  0  ; // cover all transistions on clr_
   0  ?   *   1   ?   : 0  :  0  ; // cover all transistions on clr_
   ?  ?   ?   ?   *   : ?  :  x  ; // any notifier changed

   endtable
endprimitive // udp_tlat
`endif
`define ARM_udp_edff_READ
`define ARM_udp_mux2_READ
`define ARM_udp_mux_READ
`define ARM_udp_tlatrf_READ
`define ARM_udp_plat_READ
`define ARM_udp_dff_READ
`define ARM_udp_tlatrf2_READ
`define ARM_udp_sedff_READ
`define ARM_udp_mux4_READ
`define ARM_udp_outrf_READ
`define ARM_udp_tlat_READ
